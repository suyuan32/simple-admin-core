// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	uuid "github.com/gofrs/uuid/v5"
	"github.com/suyuan32/simple-admin-core/rpc/ent/department"
	"github.com/suyuan32/simple-admin-core/rpc/ent/predicate"
	"github.com/suyuan32/simple-admin-core/rpc/ent/user"
)

// DepartmentUpdate is the builder for updating Department entities.
type DepartmentUpdate struct {
	config
	hooks    []Hook
	mutation *DepartmentMutation
}

// Where appends a list predicates to the DepartmentUpdate builder.
func (_u *DepartmentUpdate) Where(ps ...predicate.Department) *DepartmentUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *DepartmentUpdate) SetUpdatedAt(v time.Time) *DepartmentUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetStatus sets the "status" field.
func (_u *DepartmentUpdate) SetStatus(v uint8) *DepartmentUpdate {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *DepartmentUpdate) SetNillableStatus(v *uint8) *DepartmentUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *DepartmentUpdate) AddStatus(v int8) *DepartmentUpdate {
	_u.mutation.AddStatus(v)
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *DepartmentUpdate) ClearStatus() *DepartmentUpdate {
	_u.mutation.ClearStatus()
	return _u
}

// SetSort sets the "sort" field.
func (_u *DepartmentUpdate) SetSort(v uint32) *DepartmentUpdate {
	_u.mutation.ResetSort()
	_u.mutation.SetSort(v)
	return _u
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (_u *DepartmentUpdate) SetNillableSort(v *uint32) *DepartmentUpdate {
	if v != nil {
		_u.SetSort(*v)
	}
	return _u
}

// AddSort adds value to the "sort" field.
func (_u *DepartmentUpdate) AddSort(v int32) *DepartmentUpdate {
	_u.mutation.AddSort(v)
	return _u
}

// SetName sets the "name" field.
func (_u *DepartmentUpdate) SetName(v string) *DepartmentUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *DepartmentUpdate) SetNillableName(v *string) *DepartmentUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetAncestors sets the "ancestors" field.
func (_u *DepartmentUpdate) SetAncestors(v string) *DepartmentUpdate {
	_u.mutation.SetAncestors(v)
	return _u
}

// SetNillableAncestors sets the "ancestors" field if the given value is not nil.
func (_u *DepartmentUpdate) SetNillableAncestors(v *string) *DepartmentUpdate {
	if v != nil {
		_u.SetAncestors(*v)
	}
	return _u
}

// ClearAncestors clears the value of the "ancestors" field.
func (_u *DepartmentUpdate) ClearAncestors() *DepartmentUpdate {
	_u.mutation.ClearAncestors()
	return _u
}

// SetLeader sets the "leader" field.
func (_u *DepartmentUpdate) SetLeader(v string) *DepartmentUpdate {
	_u.mutation.SetLeader(v)
	return _u
}

// SetNillableLeader sets the "leader" field if the given value is not nil.
func (_u *DepartmentUpdate) SetNillableLeader(v *string) *DepartmentUpdate {
	if v != nil {
		_u.SetLeader(*v)
	}
	return _u
}

// ClearLeader clears the value of the "leader" field.
func (_u *DepartmentUpdate) ClearLeader() *DepartmentUpdate {
	_u.mutation.ClearLeader()
	return _u
}

// SetPhone sets the "phone" field.
func (_u *DepartmentUpdate) SetPhone(v string) *DepartmentUpdate {
	_u.mutation.SetPhone(v)
	return _u
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (_u *DepartmentUpdate) SetNillablePhone(v *string) *DepartmentUpdate {
	if v != nil {
		_u.SetPhone(*v)
	}
	return _u
}

// ClearPhone clears the value of the "phone" field.
func (_u *DepartmentUpdate) ClearPhone() *DepartmentUpdate {
	_u.mutation.ClearPhone()
	return _u
}

// SetEmail sets the "email" field.
func (_u *DepartmentUpdate) SetEmail(v string) *DepartmentUpdate {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *DepartmentUpdate) SetNillableEmail(v *string) *DepartmentUpdate {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// ClearEmail clears the value of the "email" field.
func (_u *DepartmentUpdate) ClearEmail() *DepartmentUpdate {
	_u.mutation.ClearEmail()
	return _u
}

// SetRemark sets the "remark" field.
func (_u *DepartmentUpdate) SetRemark(v string) *DepartmentUpdate {
	_u.mutation.SetRemark(v)
	return _u
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (_u *DepartmentUpdate) SetNillableRemark(v *string) *DepartmentUpdate {
	if v != nil {
		_u.SetRemark(*v)
	}
	return _u
}

// ClearRemark clears the value of the "remark" field.
func (_u *DepartmentUpdate) ClearRemark() *DepartmentUpdate {
	_u.mutation.ClearRemark()
	return _u
}

// SetParentID sets the "parent_id" field.
func (_u *DepartmentUpdate) SetParentID(v uint64) *DepartmentUpdate {
	_u.mutation.SetParentID(v)
	return _u
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (_u *DepartmentUpdate) SetNillableParentID(v *uint64) *DepartmentUpdate {
	if v != nil {
		_u.SetParentID(*v)
	}
	return _u
}

// ClearParentID clears the value of the "parent_id" field.
func (_u *DepartmentUpdate) ClearParentID() *DepartmentUpdate {
	_u.mutation.ClearParentID()
	return _u
}

// SetParent sets the "parent" edge to the Department entity.
func (_u *DepartmentUpdate) SetParent(v *Department) *DepartmentUpdate {
	return _u.SetParentID(v.ID)
}

// AddChildIDs adds the "children" edge to the Department entity by IDs.
func (_u *DepartmentUpdate) AddChildIDs(ids ...uint64) *DepartmentUpdate {
	_u.mutation.AddChildIDs(ids...)
	return _u
}

// AddChildren adds the "children" edges to the Department entity.
func (_u *DepartmentUpdate) AddChildren(v ...*Department) *DepartmentUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddChildIDs(ids...)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (_u *DepartmentUpdate) AddUserIDs(ids ...uuid.UUID) *DepartmentUpdate {
	_u.mutation.AddUserIDs(ids...)
	return _u
}

// AddUsers adds the "users" edges to the User entity.
func (_u *DepartmentUpdate) AddUsers(v ...*User) *DepartmentUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddUserIDs(ids...)
}

// Mutation returns the DepartmentMutation object of the builder.
func (_u *DepartmentUpdate) Mutation() *DepartmentMutation {
	return _u.mutation
}

// ClearParent clears the "parent" edge to the Department entity.
func (_u *DepartmentUpdate) ClearParent() *DepartmentUpdate {
	_u.mutation.ClearParent()
	return _u
}

// ClearChildren clears all "children" edges to the Department entity.
func (_u *DepartmentUpdate) ClearChildren() *DepartmentUpdate {
	_u.mutation.ClearChildren()
	return _u
}

// RemoveChildIDs removes the "children" edge to Department entities by IDs.
func (_u *DepartmentUpdate) RemoveChildIDs(ids ...uint64) *DepartmentUpdate {
	_u.mutation.RemoveChildIDs(ids...)
	return _u
}

// RemoveChildren removes "children" edges to Department entities.
func (_u *DepartmentUpdate) RemoveChildren(v ...*Department) *DepartmentUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveChildIDs(ids...)
}

// ClearUsers clears all "users" edges to the User entity.
func (_u *DepartmentUpdate) ClearUsers() *DepartmentUpdate {
	_u.mutation.ClearUsers()
	return _u
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (_u *DepartmentUpdate) RemoveUserIDs(ids ...uuid.UUID) *DepartmentUpdate {
	_u.mutation.RemoveUserIDs(ids...)
	return _u
}

// RemoveUsers removes "users" edges to User entities.
func (_u *DepartmentUpdate) RemoveUsers(v ...*User) *DepartmentUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *DepartmentUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *DepartmentUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *DepartmentUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *DepartmentUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *DepartmentUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := department.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *DepartmentUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(department.Table, department.Columns, sqlgraph.NewFieldSpec(department.FieldID, field.TypeUint64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(department.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(department.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(department.FieldStatus, field.TypeUint8, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(department.FieldStatus, field.TypeUint8)
	}
	if value, ok := _u.mutation.Sort(); ok {
		_spec.SetField(department.FieldSort, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedSort(); ok {
		_spec.AddField(department.FieldSort, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(department.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Ancestors(); ok {
		_spec.SetField(department.FieldAncestors, field.TypeString, value)
	}
	if _u.mutation.AncestorsCleared() {
		_spec.ClearField(department.FieldAncestors, field.TypeString)
	}
	if value, ok := _u.mutation.Leader(); ok {
		_spec.SetField(department.FieldLeader, field.TypeString, value)
	}
	if _u.mutation.LeaderCleared() {
		_spec.ClearField(department.FieldLeader, field.TypeString)
	}
	if value, ok := _u.mutation.Phone(); ok {
		_spec.SetField(department.FieldPhone, field.TypeString, value)
	}
	if _u.mutation.PhoneCleared() {
		_spec.ClearField(department.FieldPhone, field.TypeString)
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(department.FieldEmail, field.TypeString, value)
	}
	if _u.mutation.EmailCleared() {
		_spec.ClearField(department.FieldEmail, field.TypeString)
	}
	if value, ok := _u.mutation.Remark(); ok {
		_spec.SetField(department.FieldRemark, field.TypeString, value)
	}
	if _u.mutation.RemarkCleared() {
		_spec.ClearField(department.FieldRemark, field.TypeString)
	}
	if _u.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   department.ParentTable,
			Columns: []string{department.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   department.ParentTable,
			Columns: []string{department.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   department.ChildrenTable,
			Columns: []string{department.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !_u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   department.ChildrenTable,
			Columns: []string{department.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   department.ChildrenTable,
			Columns: []string{department.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   department.UsersTable,
			Columns: []string{department.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedUsersIDs(); len(nodes) > 0 && !_u.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   department.UsersTable,
			Columns: []string{department.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   department.UsersTable,
			Columns: []string{department.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{department.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// DepartmentUpdateOne is the builder for updating a single Department entity.
type DepartmentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DepartmentMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *DepartmentUpdateOne) SetUpdatedAt(v time.Time) *DepartmentUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetStatus sets the "status" field.
func (_u *DepartmentUpdateOne) SetStatus(v uint8) *DepartmentUpdateOne {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *DepartmentUpdateOne) SetNillableStatus(v *uint8) *DepartmentUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *DepartmentUpdateOne) AddStatus(v int8) *DepartmentUpdateOne {
	_u.mutation.AddStatus(v)
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *DepartmentUpdateOne) ClearStatus() *DepartmentUpdateOne {
	_u.mutation.ClearStatus()
	return _u
}

// SetSort sets the "sort" field.
func (_u *DepartmentUpdateOne) SetSort(v uint32) *DepartmentUpdateOne {
	_u.mutation.ResetSort()
	_u.mutation.SetSort(v)
	return _u
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (_u *DepartmentUpdateOne) SetNillableSort(v *uint32) *DepartmentUpdateOne {
	if v != nil {
		_u.SetSort(*v)
	}
	return _u
}

// AddSort adds value to the "sort" field.
func (_u *DepartmentUpdateOne) AddSort(v int32) *DepartmentUpdateOne {
	_u.mutation.AddSort(v)
	return _u
}

// SetName sets the "name" field.
func (_u *DepartmentUpdateOne) SetName(v string) *DepartmentUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *DepartmentUpdateOne) SetNillableName(v *string) *DepartmentUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetAncestors sets the "ancestors" field.
func (_u *DepartmentUpdateOne) SetAncestors(v string) *DepartmentUpdateOne {
	_u.mutation.SetAncestors(v)
	return _u
}

// SetNillableAncestors sets the "ancestors" field if the given value is not nil.
func (_u *DepartmentUpdateOne) SetNillableAncestors(v *string) *DepartmentUpdateOne {
	if v != nil {
		_u.SetAncestors(*v)
	}
	return _u
}

// ClearAncestors clears the value of the "ancestors" field.
func (_u *DepartmentUpdateOne) ClearAncestors() *DepartmentUpdateOne {
	_u.mutation.ClearAncestors()
	return _u
}

// SetLeader sets the "leader" field.
func (_u *DepartmentUpdateOne) SetLeader(v string) *DepartmentUpdateOne {
	_u.mutation.SetLeader(v)
	return _u
}

// SetNillableLeader sets the "leader" field if the given value is not nil.
func (_u *DepartmentUpdateOne) SetNillableLeader(v *string) *DepartmentUpdateOne {
	if v != nil {
		_u.SetLeader(*v)
	}
	return _u
}

// ClearLeader clears the value of the "leader" field.
func (_u *DepartmentUpdateOne) ClearLeader() *DepartmentUpdateOne {
	_u.mutation.ClearLeader()
	return _u
}

// SetPhone sets the "phone" field.
func (_u *DepartmentUpdateOne) SetPhone(v string) *DepartmentUpdateOne {
	_u.mutation.SetPhone(v)
	return _u
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (_u *DepartmentUpdateOne) SetNillablePhone(v *string) *DepartmentUpdateOne {
	if v != nil {
		_u.SetPhone(*v)
	}
	return _u
}

// ClearPhone clears the value of the "phone" field.
func (_u *DepartmentUpdateOne) ClearPhone() *DepartmentUpdateOne {
	_u.mutation.ClearPhone()
	return _u
}

// SetEmail sets the "email" field.
func (_u *DepartmentUpdateOne) SetEmail(v string) *DepartmentUpdateOne {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *DepartmentUpdateOne) SetNillableEmail(v *string) *DepartmentUpdateOne {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// ClearEmail clears the value of the "email" field.
func (_u *DepartmentUpdateOne) ClearEmail() *DepartmentUpdateOne {
	_u.mutation.ClearEmail()
	return _u
}

// SetRemark sets the "remark" field.
func (_u *DepartmentUpdateOne) SetRemark(v string) *DepartmentUpdateOne {
	_u.mutation.SetRemark(v)
	return _u
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (_u *DepartmentUpdateOne) SetNillableRemark(v *string) *DepartmentUpdateOne {
	if v != nil {
		_u.SetRemark(*v)
	}
	return _u
}

// ClearRemark clears the value of the "remark" field.
func (_u *DepartmentUpdateOne) ClearRemark() *DepartmentUpdateOne {
	_u.mutation.ClearRemark()
	return _u
}

// SetParentID sets the "parent_id" field.
func (_u *DepartmentUpdateOne) SetParentID(v uint64) *DepartmentUpdateOne {
	_u.mutation.SetParentID(v)
	return _u
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (_u *DepartmentUpdateOne) SetNillableParentID(v *uint64) *DepartmentUpdateOne {
	if v != nil {
		_u.SetParentID(*v)
	}
	return _u
}

// ClearParentID clears the value of the "parent_id" field.
func (_u *DepartmentUpdateOne) ClearParentID() *DepartmentUpdateOne {
	_u.mutation.ClearParentID()
	return _u
}

// SetParent sets the "parent" edge to the Department entity.
func (_u *DepartmentUpdateOne) SetParent(v *Department) *DepartmentUpdateOne {
	return _u.SetParentID(v.ID)
}

// AddChildIDs adds the "children" edge to the Department entity by IDs.
func (_u *DepartmentUpdateOne) AddChildIDs(ids ...uint64) *DepartmentUpdateOne {
	_u.mutation.AddChildIDs(ids...)
	return _u
}

// AddChildren adds the "children" edges to the Department entity.
func (_u *DepartmentUpdateOne) AddChildren(v ...*Department) *DepartmentUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddChildIDs(ids...)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (_u *DepartmentUpdateOne) AddUserIDs(ids ...uuid.UUID) *DepartmentUpdateOne {
	_u.mutation.AddUserIDs(ids...)
	return _u
}

// AddUsers adds the "users" edges to the User entity.
func (_u *DepartmentUpdateOne) AddUsers(v ...*User) *DepartmentUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddUserIDs(ids...)
}

// Mutation returns the DepartmentMutation object of the builder.
func (_u *DepartmentUpdateOne) Mutation() *DepartmentMutation {
	return _u.mutation
}

// ClearParent clears the "parent" edge to the Department entity.
func (_u *DepartmentUpdateOne) ClearParent() *DepartmentUpdateOne {
	_u.mutation.ClearParent()
	return _u
}

// ClearChildren clears all "children" edges to the Department entity.
func (_u *DepartmentUpdateOne) ClearChildren() *DepartmentUpdateOne {
	_u.mutation.ClearChildren()
	return _u
}

// RemoveChildIDs removes the "children" edge to Department entities by IDs.
func (_u *DepartmentUpdateOne) RemoveChildIDs(ids ...uint64) *DepartmentUpdateOne {
	_u.mutation.RemoveChildIDs(ids...)
	return _u
}

// RemoveChildren removes "children" edges to Department entities.
func (_u *DepartmentUpdateOne) RemoveChildren(v ...*Department) *DepartmentUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveChildIDs(ids...)
}

// ClearUsers clears all "users" edges to the User entity.
func (_u *DepartmentUpdateOne) ClearUsers() *DepartmentUpdateOne {
	_u.mutation.ClearUsers()
	return _u
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (_u *DepartmentUpdateOne) RemoveUserIDs(ids ...uuid.UUID) *DepartmentUpdateOne {
	_u.mutation.RemoveUserIDs(ids...)
	return _u
}

// RemoveUsers removes "users" edges to User entities.
func (_u *DepartmentUpdateOne) RemoveUsers(v ...*User) *DepartmentUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveUserIDs(ids...)
}

// Where appends a list predicates to the DepartmentUpdate builder.
func (_u *DepartmentUpdateOne) Where(ps ...predicate.Department) *DepartmentUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *DepartmentUpdateOne) Select(field string, fields ...string) *DepartmentUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Department entity.
func (_u *DepartmentUpdateOne) Save(ctx context.Context) (*Department, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *DepartmentUpdateOne) SaveX(ctx context.Context) *Department {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *DepartmentUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *DepartmentUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *DepartmentUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := department.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *DepartmentUpdateOne) sqlSave(ctx context.Context) (_node *Department, err error) {
	_spec := sqlgraph.NewUpdateSpec(department.Table, department.Columns, sqlgraph.NewFieldSpec(department.FieldID, field.TypeUint64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Department.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, department.FieldID)
		for _, f := range fields {
			if !department.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != department.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(department.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(department.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(department.FieldStatus, field.TypeUint8, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(department.FieldStatus, field.TypeUint8)
	}
	if value, ok := _u.mutation.Sort(); ok {
		_spec.SetField(department.FieldSort, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedSort(); ok {
		_spec.AddField(department.FieldSort, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(department.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Ancestors(); ok {
		_spec.SetField(department.FieldAncestors, field.TypeString, value)
	}
	if _u.mutation.AncestorsCleared() {
		_spec.ClearField(department.FieldAncestors, field.TypeString)
	}
	if value, ok := _u.mutation.Leader(); ok {
		_spec.SetField(department.FieldLeader, field.TypeString, value)
	}
	if _u.mutation.LeaderCleared() {
		_spec.ClearField(department.FieldLeader, field.TypeString)
	}
	if value, ok := _u.mutation.Phone(); ok {
		_spec.SetField(department.FieldPhone, field.TypeString, value)
	}
	if _u.mutation.PhoneCleared() {
		_spec.ClearField(department.FieldPhone, field.TypeString)
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(department.FieldEmail, field.TypeString, value)
	}
	if _u.mutation.EmailCleared() {
		_spec.ClearField(department.FieldEmail, field.TypeString)
	}
	if value, ok := _u.mutation.Remark(); ok {
		_spec.SetField(department.FieldRemark, field.TypeString, value)
	}
	if _u.mutation.RemarkCleared() {
		_spec.ClearField(department.FieldRemark, field.TypeString)
	}
	if _u.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   department.ParentTable,
			Columns: []string{department.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   department.ParentTable,
			Columns: []string{department.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   department.ChildrenTable,
			Columns: []string{department.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !_u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   department.ChildrenTable,
			Columns: []string{department.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   department.ChildrenTable,
			Columns: []string{department.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   department.UsersTable,
			Columns: []string{department.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedUsersIDs(); len(nodes) > 0 && !_u.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   department.UsersTable,
			Columns: []string{department.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   department.UsersTable,
			Columns: []string{department.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Department{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{department.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
