// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	uuid "github.com/gofrs/uuid/v5"
	"github.com/chimerakang/simple-admin-core/rpc/ent/predicate"
	"github.com/chimerakang/simple-admin-core/rpc/ent/token"
)

// TokenUpdate is the builder for updating Token entities.
type TokenUpdate struct {
	config
	hooks    []Hook
	mutation *TokenMutation
}

// Where appends a list predicates to the TokenUpdate builder.
func (_u *TokenUpdate) Where(ps ...predicate.Token) *TokenUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *TokenUpdate) SetUpdatedAt(v time.Time) *TokenUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetStatus sets the "status" field.
func (_u *TokenUpdate) SetStatus(v uint8) *TokenUpdate {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *TokenUpdate) SetNillableStatus(v *uint8) *TokenUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *TokenUpdate) AddStatus(v int8) *TokenUpdate {
	_u.mutation.AddStatus(v)
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *TokenUpdate) ClearStatus() *TokenUpdate {
	_u.mutation.ClearStatus()
	return _u
}

// SetUUID sets the "uuid" field.
func (_u *TokenUpdate) SetUUID(v uuid.UUID) *TokenUpdate {
	_u.mutation.SetUUID(v)
	return _u
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (_u *TokenUpdate) SetNillableUUID(v *uuid.UUID) *TokenUpdate {
	if v != nil {
		_u.SetUUID(*v)
	}
	return _u
}

// SetUsername sets the "username" field.
func (_u *TokenUpdate) SetUsername(v string) *TokenUpdate {
	_u.mutation.SetUsername(v)
	return _u
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (_u *TokenUpdate) SetNillableUsername(v *string) *TokenUpdate {
	if v != nil {
		_u.SetUsername(*v)
	}
	return _u
}

// SetToken sets the "token" field.
func (_u *TokenUpdate) SetToken(v string) *TokenUpdate {
	_u.mutation.SetToken(v)
	return _u
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (_u *TokenUpdate) SetNillableToken(v *string) *TokenUpdate {
	if v != nil {
		_u.SetToken(*v)
	}
	return _u
}

// SetSource sets the "source" field.
func (_u *TokenUpdate) SetSource(v string) *TokenUpdate {
	_u.mutation.SetSource(v)
	return _u
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (_u *TokenUpdate) SetNillableSource(v *string) *TokenUpdate {
	if v != nil {
		_u.SetSource(*v)
	}
	return _u
}

// SetExpiredAt sets the "expired_at" field.
func (_u *TokenUpdate) SetExpiredAt(v time.Time) *TokenUpdate {
	_u.mutation.SetExpiredAt(v)
	return _u
}

// SetNillableExpiredAt sets the "expired_at" field if the given value is not nil.
func (_u *TokenUpdate) SetNillableExpiredAt(v *time.Time) *TokenUpdate {
	if v != nil {
		_u.SetExpiredAt(*v)
	}
	return _u
}

// Mutation returns the TokenMutation object of the builder.
func (_u *TokenUpdate) Mutation() *TokenMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *TokenUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TokenUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *TokenUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TokenUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *TokenUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := token.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *TokenUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(token.Table, token.Columns, sqlgraph.NewFieldSpec(token.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(token.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(token.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(token.FieldStatus, field.TypeUint8, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(token.FieldStatus, field.TypeUint8)
	}
	if value, ok := _u.mutation.UUID(); ok {
		_spec.SetField(token.FieldUUID, field.TypeUUID, value)
	}
	if value, ok := _u.mutation.Username(); ok {
		_spec.SetField(token.FieldUsername, field.TypeString, value)
	}
	if value, ok := _u.mutation.Token(); ok {
		_spec.SetField(token.FieldToken, field.TypeString, value)
	}
	if value, ok := _u.mutation.Source(); ok {
		_spec.SetField(token.FieldSource, field.TypeString, value)
	}
	if value, ok := _u.mutation.ExpiredAt(); ok {
		_spec.SetField(token.FieldExpiredAt, field.TypeTime, value)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{token.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// TokenUpdateOne is the builder for updating a single Token entity.
type TokenUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TokenMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *TokenUpdateOne) SetUpdatedAt(v time.Time) *TokenUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetStatus sets the "status" field.
func (_u *TokenUpdateOne) SetStatus(v uint8) *TokenUpdateOne {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *TokenUpdateOne) SetNillableStatus(v *uint8) *TokenUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *TokenUpdateOne) AddStatus(v int8) *TokenUpdateOne {
	_u.mutation.AddStatus(v)
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *TokenUpdateOne) ClearStatus() *TokenUpdateOne {
	_u.mutation.ClearStatus()
	return _u
}

// SetUUID sets the "uuid" field.
func (_u *TokenUpdateOne) SetUUID(v uuid.UUID) *TokenUpdateOne {
	_u.mutation.SetUUID(v)
	return _u
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (_u *TokenUpdateOne) SetNillableUUID(v *uuid.UUID) *TokenUpdateOne {
	if v != nil {
		_u.SetUUID(*v)
	}
	return _u
}

// SetUsername sets the "username" field.
func (_u *TokenUpdateOne) SetUsername(v string) *TokenUpdateOne {
	_u.mutation.SetUsername(v)
	return _u
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (_u *TokenUpdateOne) SetNillableUsername(v *string) *TokenUpdateOne {
	if v != nil {
		_u.SetUsername(*v)
	}
	return _u
}

// SetToken sets the "token" field.
func (_u *TokenUpdateOne) SetToken(v string) *TokenUpdateOne {
	_u.mutation.SetToken(v)
	return _u
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (_u *TokenUpdateOne) SetNillableToken(v *string) *TokenUpdateOne {
	if v != nil {
		_u.SetToken(*v)
	}
	return _u
}

// SetSource sets the "source" field.
func (_u *TokenUpdateOne) SetSource(v string) *TokenUpdateOne {
	_u.mutation.SetSource(v)
	return _u
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (_u *TokenUpdateOne) SetNillableSource(v *string) *TokenUpdateOne {
	if v != nil {
		_u.SetSource(*v)
	}
	return _u
}

// SetExpiredAt sets the "expired_at" field.
func (_u *TokenUpdateOne) SetExpiredAt(v time.Time) *TokenUpdateOne {
	_u.mutation.SetExpiredAt(v)
	return _u
}

// SetNillableExpiredAt sets the "expired_at" field if the given value is not nil.
func (_u *TokenUpdateOne) SetNillableExpiredAt(v *time.Time) *TokenUpdateOne {
	if v != nil {
		_u.SetExpiredAt(*v)
	}
	return _u
}

// Mutation returns the TokenMutation object of the builder.
func (_u *TokenUpdateOne) Mutation() *TokenMutation {
	return _u.mutation
}

// Where appends a list predicates to the TokenUpdate builder.
func (_u *TokenUpdateOne) Where(ps ...predicate.Token) *TokenUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *TokenUpdateOne) Select(field string, fields ...string) *TokenUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Token entity.
func (_u *TokenUpdateOne) Save(ctx context.Context) (*Token, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TokenUpdateOne) SaveX(ctx context.Context) *Token {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *TokenUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TokenUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *TokenUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := token.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *TokenUpdateOne) sqlSave(ctx context.Context) (_node *Token, err error) {
	_spec := sqlgraph.NewUpdateSpec(token.Table, token.Columns, sqlgraph.NewFieldSpec(token.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Token.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, token.FieldID)
		for _, f := range fields {
			if !token.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != token.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(token.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(token.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(token.FieldStatus, field.TypeUint8, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(token.FieldStatus, field.TypeUint8)
	}
	if value, ok := _u.mutation.UUID(); ok {
		_spec.SetField(token.FieldUUID, field.TypeUUID, value)
	}
	if value, ok := _u.mutation.Username(); ok {
		_spec.SetField(token.FieldUsername, field.TypeString, value)
	}
	if value, ok := _u.mutation.Token(); ok {
		_spec.SetField(token.FieldToken, field.TypeString, value)
	}
	if value, ok := _u.mutation.Source(); ok {
		_spec.SetField(token.FieldSource, field.TypeString, value)
	}
	if value, ok := _u.mutation.ExpiredAt(); ok {
		_spec.SetField(token.FieldExpiredAt, field.TypeTime, value)
	}
	_node = &Token{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{token.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
