// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chimerakang/simple-admin-core/rpc/ent/dictionary"
	"github.com/chimerakang/simple-admin-core/rpc/ent/dictionarydetail"
)

// DictionaryDetailCreate is the builder for creating a DictionaryDetail entity.
type DictionaryDetailCreate struct {
	config
	mutation *DictionaryDetailMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (_c *DictionaryDetailCreate) SetCreatedAt(v time.Time) *DictionaryDetailCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *DictionaryDetailCreate) SetNillableCreatedAt(v *time.Time) *DictionaryDetailCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *DictionaryDetailCreate) SetUpdatedAt(v time.Time) *DictionaryDetailCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *DictionaryDetailCreate) SetNillableUpdatedAt(v *time.Time) *DictionaryDetailCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetStatus sets the "status" field.
func (_c *DictionaryDetailCreate) SetStatus(v uint8) *DictionaryDetailCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *DictionaryDetailCreate) SetNillableStatus(v *uint8) *DictionaryDetailCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetSort sets the "sort" field.
func (_c *DictionaryDetailCreate) SetSort(v uint32) *DictionaryDetailCreate {
	_c.mutation.SetSort(v)
	return _c
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (_c *DictionaryDetailCreate) SetNillableSort(v *uint32) *DictionaryDetailCreate {
	if v != nil {
		_c.SetSort(*v)
	}
	return _c
}

// SetTitle sets the "title" field.
func (_c *DictionaryDetailCreate) SetTitle(v string) *DictionaryDetailCreate {
	_c.mutation.SetTitle(v)
	return _c
}

// SetKey sets the "key" field.
func (_c *DictionaryDetailCreate) SetKey(v string) *DictionaryDetailCreate {
	_c.mutation.SetKey(v)
	return _c
}

// SetValue sets the "value" field.
func (_c *DictionaryDetailCreate) SetValue(v string) *DictionaryDetailCreate {
	_c.mutation.SetValue(v)
	return _c
}

// SetDictionaryID sets the "dictionary_id" field.
func (_c *DictionaryDetailCreate) SetDictionaryID(v uint64) *DictionaryDetailCreate {
	_c.mutation.SetDictionaryID(v)
	return _c
}

// SetNillableDictionaryID sets the "dictionary_id" field if the given value is not nil.
func (_c *DictionaryDetailCreate) SetNillableDictionaryID(v *uint64) *DictionaryDetailCreate {
	if v != nil {
		_c.SetDictionaryID(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *DictionaryDetailCreate) SetID(v uint64) *DictionaryDetailCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetDictionariesID sets the "dictionaries" edge to the Dictionary entity by ID.
func (_c *DictionaryDetailCreate) SetDictionariesID(id uint64) *DictionaryDetailCreate {
	_c.mutation.SetDictionariesID(id)
	return _c
}

// SetNillableDictionariesID sets the "dictionaries" edge to the Dictionary entity by ID if the given value is not nil.
func (_c *DictionaryDetailCreate) SetNillableDictionariesID(id *uint64) *DictionaryDetailCreate {
	if id != nil {
		_c = _c.SetDictionariesID(*id)
	}
	return _c
}

// SetDictionaries sets the "dictionaries" edge to the Dictionary entity.
func (_c *DictionaryDetailCreate) SetDictionaries(v *Dictionary) *DictionaryDetailCreate {
	return _c.SetDictionariesID(v.ID)
}

// Mutation returns the DictionaryDetailMutation object of the builder.
func (_c *DictionaryDetailCreate) Mutation() *DictionaryDetailMutation {
	return _c.mutation
}

// Save creates the DictionaryDetail in the database.
func (_c *DictionaryDetailCreate) Save(ctx context.Context) (*DictionaryDetail, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *DictionaryDetailCreate) SaveX(ctx context.Context) *DictionaryDetail {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *DictionaryDetailCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *DictionaryDetailCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *DictionaryDetailCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := dictionarydetail.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := dictionarydetail.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.Status(); !ok {
		v := dictionarydetail.DefaultStatus
		_c.mutation.SetStatus(v)
	}
	if _, ok := _c.mutation.Sort(); !ok {
		v := dictionarydetail.DefaultSort
		_c.mutation.SetSort(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *DictionaryDetailCreate) check() error {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "DictionaryDetail.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "DictionaryDetail.updated_at"`)}
	}
	if _, ok := _c.mutation.Sort(); !ok {
		return &ValidationError{Name: "sort", err: errors.New(`ent: missing required field "DictionaryDetail.sort"`)}
	}
	if _, ok := _c.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "DictionaryDetail.title"`)}
	}
	if _, ok := _c.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "DictionaryDetail.key"`)}
	}
	if _, ok := _c.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "DictionaryDetail.value"`)}
	}
	return nil
}

func (_c *DictionaryDetailCreate) sqlSave(ctx context.Context) (*DictionaryDetail, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *DictionaryDetailCreate) createSpec() (*DictionaryDetail, *sqlgraph.CreateSpec) {
	var (
		_node = &DictionaryDetail{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(dictionarydetail.Table, sqlgraph.NewFieldSpec(dictionarydetail.FieldID, field.TypeUint64))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(dictionarydetail.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(dictionarydetail.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(dictionarydetail.FieldStatus, field.TypeUint8, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.Sort(); ok {
		_spec.SetField(dictionarydetail.FieldSort, field.TypeUint32, value)
		_node.Sort = value
	}
	if value, ok := _c.mutation.Title(); ok {
		_spec.SetField(dictionarydetail.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := _c.mutation.Key(); ok {
		_spec.SetField(dictionarydetail.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := _c.mutation.Value(); ok {
		_spec.SetField(dictionarydetail.FieldValue, field.TypeString, value)
		_node.Value = value
	}
	if nodes := _c.mutation.DictionariesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dictionarydetail.DictionariesTable,
			Columns: []string{dictionarydetail.DictionariesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dictionary.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DictionaryID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DictionaryDetailCreateBulk is the builder for creating many DictionaryDetail entities in bulk.
type DictionaryDetailCreateBulk struct {
	config
	err      error
	builders []*DictionaryDetailCreate
}

// Save creates the DictionaryDetail entities in the database.
func (_c *DictionaryDetailCreateBulk) Save(ctx context.Context) ([]*DictionaryDetail, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*DictionaryDetail, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DictionaryDetailMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *DictionaryDetailCreateBulk) SaveX(ctx context.Context) []*DictionaryDetail {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *DictionaryDetailCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *DictionaryDetailCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
