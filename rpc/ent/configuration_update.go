// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/suyuan32/simple-admin-core/rpc/ent/configuration"
	"github.com/suyuan32/simple-admin-core/rpc/ent/predicate"
)

// ConfigurationUpdate is the builder for updating Configuration entities.
type ConfigurationUpdate struct {
	config
	hooks    []Hook
	mutation *ConfigurationMutation
}

// Where appends a list predicates to the ConfigurationUpdate builder.
func (_u *ConfigurationUpdate) Where(ps ...predicate.Configuration) *ConfigurationUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ConfigurationUpdate) SetUpdatedAt(v time.Time) *ConfigurationUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetSort sets the "sort" field.
func (_u *ConfigurationUpdate) SetSort(v uint32) *ConfigurationUpdate {
	_u.mutation.ResetSort()
	_u.mutation.SetSort(v)
	return _u
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (_u *ConfigurationUpdate) SetNillableSort(v *uint32) *ConfigurationUpdate {
	if v != nil {
		_u.SetSort(*v)
	}
	return _u
}

// AddSort adds value to the "sort" field.
func (_u *ConfigurationUpdate) AddSort(v int32) *ConfigurationUpdate {
	_u.mutation.AddSort(v)
	return _u
}

// SetState sets the "state" field.
func (_u *ConfigurationUpdate) SetState(v bool) *ConfigurationUpdate {
	_u.mutation.SetState(v)
	return _u
}

// SetNillableState sets the "state" field if the given value is not nil.
func (_u *ConfigurationUpdate) SetNillableState(v *bool) *ConfigurationUpdate {
	if v != nil {
		_u.SetState(*v)
	}
	return _u
}

// ClearState clears the value of the "state" field.
func (_u *ConfigurationUpdate) ClearState() *ConfigurationUpdate {
	_u.mutation.ClearState()
	return _u
}

// SetName sets the "name" field.
func (_u *ConfigurationUpdate) SetName(v string) *ConfigurationUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *ConfigurationUpdate) SetNillableName(v *string) *ConfigurationUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetKey sets the "key" field.
func (_u *ConfigurationUpdate) SetKey(v string) *ConfigurationUpdate {
	_u.mutation.SetKey(v)
	return _u
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (_u *ConfigurationUpdate) SetNillableKey(v *string) *ConfigurationUpdate {
	if v != nil {
		_u.SetKey(*v)
	}
	return _u
}

// SetValue sets the "value" field.
func (_u *ConfigurationUpdate) SetValue(v string) *ConfigurationUpdate {
	_u.mutation.SetValue(v)
	return _u
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (_u *ConfigurationUpdate) SetNillableValue(v *string) *ConfigurationUpdate {
	if v != nil {
		_u.SetValue(*v)
	}
	return _u
}

// SetCategory sets the "category" field.
func (_u *ConfigurationUpdate) SetCategory(v string) *ConfigurationUpdate {
	_u.mutation.SetCategory(v)
	return _u
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (_u *ConfigurationUpdate) SetNillableCategory(v *string) *ConfigurationUpdate {
	if v != nil {
		_u.SetCategory(*v)
	}
	return _u
}

// SetRemark sets the "remark" field.
func (_u *ConfigurationUpdate) SetRemark(v string) *ConfigurationUpdate {
	_u.mutation.SetRemark(v)
	return _u
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (_u *ConfigurationUpdate) SetNillableRemark(v *string) *ConfigurationUpdate {
	if v != nil {
		_u.SetRemark(*v)
	}
	return _u
}

// ClearRemark clears the value of the "remark" field.
func (_u *ConfigurationUpdate) ClearRemark() *ConfigurationUpdate {
	_u.mutation.ClearRemark()
	return _u
}

// Mutation returns the ConfigurationMutation object of the builder.
func (_u *ConfigurationUpdate) Mutation() *ConfigurationMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ConfigurationUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ConfigurationUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ConfigurationUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ConfigurationUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ConfigurationUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := configuration.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *ConfigurationUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(configuration.Table, configuration.Columns, sqlgraph.NewFieldSpec(configuration.FieldID, field.TypeUint64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(configuration.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Sort(); ok {
		_spec.SetField(configuration.FieldSort, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedSort(); ok {
		_spec.AddField(configuration.FieldSort, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.State(); ok {
		_spec.SetField(configuration.FieldState, field.TypeBool, value)
	}
	if _u.mutation.StateCleared() {
		_spec.ClearField(configuration.FieldState, field.TypeBool)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(configuration.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Key(); ok {
		_spec.SetField(configuration.FieldKey, field.TypeString, value)
	}
	if value, ok := _u.mutation.Value(); ok {
		_spec.SetField(configuration.FieldValue, field.TypeString, value)
	}
	if value, ok := _u.mutation.Category(); ok {
		_spec.SetField(configuration.FieldCategory, field.TypeString, value)
	}
	if value, ok := _u.mutation.Remark(); ok {
		_spec.SetField(configuration.FieldRemark, field.TypeString, value)
	}
	if _u.mutation.RemarkCleared() {
		_spec.ClearField(configuration.FieldRemark, field.TypeString)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{configuration.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ConfigurationUpdateOne is the builder for updating a single Configuration entity.
type ConfigurationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ConfigurationMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ConfigurationUpdateOne) SetUpdatedAt(v time.Time) *ConfigurationUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetSort sets the "sort" field.
func (_u *ConfigurationUpdateOne) SetSort(v uint32) *ConfigurationUpdateOne {
	_u.mutation.ResetSort()
	_u.mutation.SetSort(v)
	return _u
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (_u *ConfigurationUpdateOne) SetNillableSort(v *uint32) *ConfigurationUpdateOne {
	if v != nil {
		_u.SetSort(*v)
	}
	return _u
}

// AddSort adds value to the "sort" field.
func (_u *ConfigurationUpdateOne) AddSort(v int32) *ConfigurationUpdateOne {
	_u.mutation.AddSort(v)
	return _u
}

// SetState sets the "state" field.
func (_u *ConfigurationUpdateOne) SetState(v bool) *ConfigurationUpdateOne {
	_u.mutation.SetState(v)
	return _u
}

// SetNillableState sets the "state" field if the given value is not nil.
func (_u *ConfigurationUpdateOne) SetNillableState(v *bool) *ConfigurationUpdateOne {
	if v != nil {
		_u.SetState(*v)
	}
	return _u
}

// ClearState clears the value of the "state" field.
func (_u *ConfigurationUpdateOne) ClearState() *ConfigurationUpdateOne {
	_u.mutation.ClearState()
	return _u
}

// SetName sets the "name" field.
func (_u *ConfigurationUpdateOne) SetName(v string) *ConfigurationUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *ConfigurationUpdateOne) SetNillableName(v *string) *ConfigurationUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetKey sets the "key" field.
func (_u *ConfigurationUpdateOne) SetKey(v string) *ConfigurationUpdateOne {
	_u.mutation.SetKey(v)
	return _u
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (_u *ConfigurationUpdateOne) SetNillableKey(v *string) *ConfigurationUpdateOne {
	if v != nil {
		_u.SetKey(*v)
	}
	return _u
}

// SetValue sets the "value" field.
func (_u *ConfigurationUpdateOne) SetValue(v string) *ConfigurationUpdateOne {
	_u.mutation.SetValue(v)
	return _u
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (_u *ConfigurationUpdateOne) SetNillableValue(v *string) *ConfigurationUpdateOne {
	if v != nil {
		_u.SetValue(*v)
	}
	return _u
}

// SetCategory sets the "category" field.
func (_u *ConfigurationUpdateOne) SetCategory(v string) *ConfigurationUpdateOne {
	_u.mutation.SetCategory(v)
	return _u
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (_u *ConfigurationUpdateOne) SetNillableCategory(v *string) *ConfigurationUpdateOne {
	if v != nil {
		_u.SetCategory(*v)
	}
	return _u
}

// SetRemark sets the "remark" field.
func (_u *ConfigurationUpdateOne) SetRemark(v string) *ConfigurationUpdateOne {
	_u.mutation.SetRemark(v)
	return _u
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (_u *ConfigurationUpdateOne) SetNillableRemark(v *string) *ConfigurationUpdateOne {
	if v != nil {
		_u.SetRemark(*v)
	}
	return _u
}

// ClearRemark clears the value of the "remark" field.
func (_u *ConfigurationUpdateOne) ClearRemark() *ConfigurationUpdateOne {
	_u.mutation.ClearRemark()
	return _u
}

// Mutation returns the ConfigurationMutation object of the builder.
func (_u *ConfigurationUpdateOne) Mutation() *ConfigurationMutation {
	return _u.mutation
}

// Where appends a list predicates to the ConfigurationUpdate builder.
func (_u *ConfigurationUpdateOne) Where(ps ...predicate.Configuration) *ConfigurationUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ConfigurationUpdateOne) Select(field string, fields ...string) *ConfigurationUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Configuration entity.
func (_u *ConfigurationUpdateOne) Save(ctx context.Context) (*Configuration, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ConfigurationUpdateOne) SaveX(ctx context.Context) *Configuration {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ConfigurationUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ConfigurationUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ConfigurationUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := configuration.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *ConfigurationUpdateOne) sqlSave(ctx context.Context) (_node *Configuration, err error) {
	_spec := sqlgraph.NewUpdateSpec(configuration.Table, configuration.Columns, sqlgraph.NewFieldSpec(configuration.FieldID, field.TypeUint64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Configuration.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, configuration.FieldID)
		for _, f := range fields {
			if !configuration.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != configuration.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(configuration.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Sort(); ok {
		_spec.SetField(configuration.FieldSort, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedSort(); ok {
		_spec.AddField(configuration.FieldSort, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.State(); ok {
		_spec.SetField(configuration.FieldState, field.TypeBool, value)
	}
	if _u.mutation.StateCleared() {
		_spec.ClearField(configuration.FieldState, field.TypeBool)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(configuration.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Key(); ok {
		_spec.SetField(configuration.FieldKey, field.TypeString, value)
	}
	if value, ok := _u.mutation.Value(); ok {
		_spec.SetField(configuration.FieldValue, field.TypeString, value)
	}
	if value, ok := _u.mutation.Category(); ok {
		_spec.SetField(configuration.FieldCategory, field.TypeString, value)
	}
	if value, ok := _u.mutation.Remark(); ok {
		_spec.SetField(configuration.FieldRemark, field.TypeString, value)
	}
	if _u.mutation.RemarkCleared() {
		_spec.ClearField(configuration.FieldRemark, field.TypeString)
	}
	_node = &Configuration{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{configuration.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
