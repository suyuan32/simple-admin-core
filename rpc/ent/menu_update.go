// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/suyuan32/simple-admin-core/rpc/ent/menu"
	"github.com/suyuan32/simple-admin-core/rpc/ent/predicate"
	"github.com/suyuan32/simple-admin-core/rpc/ent/role"
)

// MenuUpdate is the builder for updating Menu entities.
type MenuUpdate struct {
	config
	hooks    []Hook
	mutation *MenuMutation
}

// Where appends a list predicates to the MenuUpdate builder.
func (_u *MenuUpdate) Where(ps ...predicate.Menu) *MenuUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *MenuUpdate) SetUpdatedAt(v time.Time) *MenuUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetSort sets the "sort" field.
func (_u *MenuUpdate) SetSort(v uint32) *MenuUpdate {
	_u.mutation.ResetSort()
	_u.mutation.SetSort(v)
	return _u
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableSort(v *uint32) *MenuUpdate {
	if v != nil {
		_u.SetSort(*v)
	}
	return _u
}

// AddSort adds value to the "sort" field.
func (_u *MenuUpdate) AddSort(v int32) *MenuUpdate {
	_u.mutation.AddSort(v)
	return _u
}

// SetParentID sets the "parent_id" field.
func (_u *MenuUpdate) SetParentID(v uint64) *MenuUpdate {
	_u.mutation.SetParentID(v)
	return _u
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableParentID(v *uint64) *MenuUpdate {
	if v != nil {
		_u.SetParentID(*v)
	}
	return _u
}

// ClearParentID clears the value of the "parent_id" field.
func (_u *MenuUpdate) ClearParentID() *MenuUpdate {
	_u.mutation.ClearParentID()
	return _u
}

// SetMenuLevel sets the "menu_level" field.
func (_u *MenuUpdate) SetMenuLevel(v uint32) *MenuUpdate {
	_u.mutation.ResetMenuLevel()
	_u.mutation.SetMenuLevel(v)
	return _u
}

// SetNillableMenuLevel sets the "menu_level" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableMenuLevel(v *uint32) *MenuUpdate {
	if v != nil {
		_u.SetMenuLevel(*v)
	}
	return _u
}

// AddMenuLevel adds value to the "menu_level" field.
func (_u *MenuUpdate) AddMenuLevel(v int32) *MenuUpdate {
	_u.mutation.AddMenuLevel(v)
	return _u
}

// SetMenuType sets the "menu_type" field.
func (_u *MenuUpdate) SetMenuType(v uint32) *MenuUpdate {
	_u.mutation.ResetMenuType()
	_u.mutation.SetMenuType(v)
	return _u
}

// SetNillableMenuType sets the "menu_type" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableMenuType(v *uint32) *MenuUpdate {
	if v != nil {
		_u.SetMenuType(*v)
	}
	return _u
}

// AddMenuType adds value to the "menu_type" field.
func (_u *MenuUpdate) AddMenuType(v int32) *MenuUpdate {
	_u.mutation.AddMenuType(v)
	return _u
}

// SetPath sets the "path" field.
func (_u *MenuUpdate) SetPath(v string) *MenuUpdate {
	_u.mutation.SetPath(v)
	return _u
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (_u *MenuUpdate) SetNillablePath(v *string) *MenuUpdate {
	if v != nil {
		_u.SetPath(*v)
	}
	return _u
}

// ClearPath clears the value of the "path" field.
func (_u *MenuUpdate) ClearPath() *MenuUpdate {
	_u.mutation.ClearPath()
	return _u
}

// SetName sets the "name" field.
func (_u *MenuUpdate) SetName(v string) *MenuUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableName(v *string) *MenuUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetRedirect sets the "redirect" field.
func (_u *MenuUpdate) SetRedirect(v string) *MenuUpdate {
	_u.mutation.SetRedirect(v)
	return _u
}

// SetNillableRedirect sets the "redirect" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableRedirect(v *string) *MenuUpdate {
	if v != nil {
		_u.SetRedirect(*v)
	}
	return _u
}

// ClearRedirect clears the value of the "redirect" field.
func (_u *MenuUpdate) ClearRedirect() *MenuUpdate {
	_u.mutation.ClearRedirect()
	return _u
}

// SetComponent sets the "component" field.
func (_u *MenuUpdate) SetComponent(v string) *MenuUpdate {
	_u.mutation.SetComponent(v)
	return _u
}

// SetNillableComponent sets the "component" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableComponent(v *string) *MenuUpdate {
	if v != nil {
		_u.SetComponent(*v)
	}
	return _u
}

// ClearComponent clears the value of the "component" field.
func (_u *MenuUpdate) ClearComponent() *MenuUpdate {
	_u.mutation.ClearComponent()
	return _u
}

// SetDisabled sets the "disabled" field.
func (_u *MenuUpdate) SetDisabled(v bool) *MenuUpdate {
	_u.mutation.SetDisabled(v)
	return _u
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableDisabled(v *bool) *MenuUpdate {
	if v != nil {
		_u.SetDisabled(*v)
	}
	return _u
}

// ClearDisabled clears the value of the "disabled" field.
func (_u *MenuUpdate) ClearDisabled() *MenuUpdate {
	_u.mutation.ClearDisabled()
	return _u
}

// SetServiceName sets the "service_name" field.
func (_u *MenuUpdate) SetServiceName(v string) *MenuUpdate {
	_u.mutation.SetServiceName(v)
	return _u
}

// SetNillableServiceName sets the "service_name" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableServiceName(v *string) *MenuUpdate {
	if v != nil {
		_u.SetServiceName(*v)
	}
	return _u
}

// ClearServiceName clears the value of the "service_name" field.
func (_u *MenuUpdate) ClearServiceName() *MenuUpdate {
	_u.mutation.ClearServiceName()
	return _u
}

// SetPermission sets the "permission" field.
func (_u *MenuUpdate) SetPermission(v string) *MenuUpdate {
	_u.mutation.SetPermission(v)
	return _u
}

// SetNillablePermission sets the "permission" field if the given value is not nil.
func (_u *MenuUpdate) SetNillablePermission(v *string) *MenuUpdate {
	if v != nil {
		_u.SetPermission(*v)
	}
	return _u
}

// ClearPermission clears the value of the "permission" field.
func (_u *MenuUpdate) ClearPermission() *MenuUpdate {
	_u.mutation.ClearPermission()
	return _u
}

// SetTitle sets the "title" field.
func (_u *MenuUpdate) SetTitle(v string) *MenuUpdate {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableTitle(v *string) *MenuUpdate {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetIcon sets the "icon" field.
func (_u *MenuUpdate) SetIcon(v string) *MenuUpdate {
	_u.mutation.SetIcon(v)
	return _u
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableIcon(v *string) *MenuUpdate {
	if v != nil {
		_u.SetIcon(*v)
	}
	return _u
}

// SetTrans sets the "trans" field.
func (_u *MenuUpdate) SetTrans(v string) *MenuUpdate {
	_u.mutation.SetTrans(v)
	return _u
}

// SetNillableTrans sets the "trans" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableTrans(v *string) *MenuUpdate {
	if v != nil {
		_u.SetTrans(*v)
	}
	return _u
}

// ClearTrans clears the value of the "trans" field.
func (_u *MenuUpdate) ClearTrans() *MenuUpdate {
	_u.mutation.ClearTrans()
	return _u
}

// SetHideMenu sets the "hide_menu" field.
func (_u *MenuUpdate) SetHideMenu(v bool) *MenuUpdate {
	_u.mutation.SetHideMenu(v)
	return _u
}

// SetNillableHideMenu sets the "hide_menu" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableHideMenu(v *bool) *MenuUpdate {
	if v != nil {
		_u.SetHideMenu(*v)
	}
	return _u
}

// ClearHideMenu clears the value of the "hide_menu" field.
func (_u *MenuUpdate) ClearHideMenu() *MenuUpdate {
	_u.mutation.ClearHideMenu()
	return _u
}

// SetHideBreadcrumb sets the "hide_breadcrumb" field.
func (_u *MenuUpdate) SetHideBreadcrumb(v bool) *MenuUpdate {
	_u.mutation.SetHideBreadcrumb(v)
	return _u
}

// SetNillableHideBreadcrumb sets the "hide_breadcrumb" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableHideBreadcrumb(v *bool) *MenuUpdate {
	if v != nil {
		_u.SetHideBreadcrumb(*v)
	}
	return _u
}

// ClearHideBreadcrumb clears the value of the "hide_breadcrumb" field.
func (_u *MenuUpdate) ClearHideBreadcrumb() *MenuUpdate {
	_u.mutation.ClearHideBreadcrumb()
	return _u
}

// SetIgnoreKeepAlive sets the "ignore_keep_alive" field.
func (_u *MenuUpdate) SetIgnoreKeepAlive(v bool) *MenuUpdate {
	_u.mutation.SetIgnoreKeepAlive(v)
	return _u
}

// SetNillableIgnoreKeepAlive sets the "ignore_keep_alive" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableIgnoreKeepAlive(v *bool) *MenuUpdate {
	if v != nil {
		_u.SetIgnoreKeepAlive(*v)
	}
	return _u
}

// ClearIgnoreKeepAlive clears the value of the "ignore_keep_alive" field.
func (_u *MenuUpdate) ClearIgnoreKeepAlive() *MenuUpdate {
	_u.mutation.ClearIgnoreKeepAlive()
	return _u
}

// SetHideTab sets the "hide_tab" field.
func (_u *MenuUpdate) SetHideTab(v bool) *MenuUpdate {
	_u.mutation.SetHideTab(v)
	return _u
}

// SetNillableHideTab sets the "hide_tab" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableHideTab(v *bool) *MenuUpdate {
	if v != nil {
		_u.SetHideTab(*v)
	}
	return _u
}

// ClearHideTab clears the value of the "hide_tab" field.
func (_u *MenuUpdate) ClearHideTab() *MenuUpdate {
	_u.mutation.ClearHideTab()
	return _u
}

// SetFrameSrc sets the "frame_src" field.
func (_u *MenuUpdate) SetFrameSrc(v string) *MenuUpdate {
	_u.mutation.SetFrameSrc(v)
	return _u
}

// SetNillableFrameSrc sets the "frame_src" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableFrameSrc(v *string) *MenuUpdate {
	if v != nil {
		_u.SetFrameSrc(*v)
	}
	return _u
}

// ClearFrameSrc clears the value of the "frame_src" field.
func (_u *MenuUpdate) ClearFrameSrc() *MenuUpdate {
	_u.mutation.ClearFrameSrc()
	return _u
}

// SetCarryParam sets the "carry_param" field.
func (_u *MenuUpdate) SetCarryParam(v bool) *MenuUpdate {
	_u.mutation.SetCarryParam(v)
	return _u
}

// SetNillableCarryParam sets the "carry_param" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableCarryParam(v *bool) *MenuUpdate {
	if v != nil {
		_u.SetCarryParam(*v)
	}
	return _u
}

// ClearCarryParam clears the value of the "carry_param" field.
func (_u *MenuUpdate) ClearCarryParam() *MenuUpdate {
	_u.mutation.ClearCarryParam()
	return _u
}

// SetHideChildrenInMenu sets the "hide_children_in_menu" field.
func (_u *MenuUpdate) SetHideChildrenInMenu(v bool) *MenuUpdate {
	_u.mutation.SetHideChildrenInMenu(v)
	return _u
}

// SetNillableHideChildrenInMenu sets the "hide_children_in_menu" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableHideChildrenInMenu(v *bool) *MenuUpdate {
	if v != nil {
		_u.SetHideChildrenInMenu(*v)
	}
	return _u
}

// ClearHideChildrenInMenu clears the value of the "hide_children_in_menu" field.
func (_u *MenuUpdate) ClearHideChildrenInMenu() *MenuUpdate {
	_u.mutation.ClearHideChildrenInMenu()
	return _u
}

// SetAffix sets the "affix" field.
func (_u *MenuUpdate) SetAffix(v bool) *MenuUpdate {
	_u.mutation.SetAffix(v)
	return _u
}

// SetNillableAffix sets the "affix" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableAffix(v *bool) *MenuUpdate {
	if v != nil {
		_u.SetAffix(*v)
	}
	return _u
}

// ClearAffix clears the value of the "affix" field.
func (_u *MenuUpdate) ClearAffix() *MenuUpdate {
	_u.mutation.ClearAffix()
	return _u
}

// SetDynamicLevel sets the "dynamic_level" field.
func (_u *MenuUpdate) SetDynamicLevel(v uint32) *MenuUpdate {
	_u.mutation.ResetDynamicLevel()
	_u.mutation.SetDynamicLevel(v)
	return _u
}

// SetNillableDynamicLevel sets the "dynamic_level" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableDynamicLevel(v *uint32) *MenuUpdate {
	if v != nil {
		_u.SetDynamicLevel(*v)
	}
	return _u
}

// AddDynamicLevel adds value to the "dynamic_level" field.
func (_u *MenuUpdate) AddDynamicLevel(v int32) *MenuUpdate {
	_u.mutation.AddDynamicLevel(v)
	return _u
}

// ClearDynamicLevel clears the value of the "dynamic_level" field.
func (_u *MenuUpdate) ClearDynamicLevel() *MenuUpdate {
	_u.mutation.ClearDynamicLevel()
	return _u
}

// SetRealPath sets the "real_path" field.
func (_u *MenuUpdate) SetRealPath(v string) *MenuUpdate {
	_u.mutation.SetRealPath(v)
	return _u
}

// SetNillableRealPath sets the "real_path" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableRealPath(v *string) *MenuUpdate {
	if v != nil {
		_u.SetRealPath(*v)
	}
	return _u
}

// ClearRealPath clears the value of the "real_path" field.
func (_u *MenuUpdate) ClearRealPath() *MenuUpdate {
	_u.mutation.ClearRealPath()
	return _u
}

// AddRoleIDs adds the "roles" edge to the Role entity by IDs.
func (_u *MenuUpdate) AddRoleIDs(ids ...uint64) *MenuUpdate {
	_u.mutation.AddRoleIDs(ids...)
	return _u
}

// AddRoles adds the "roles" edges to the Role entity.
func (_u *MenuUpdate) AddRoles(v ...*Role) *MenuUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddRoleIDs(ids...)
}

// SetParent sets the "parent" edge to the Menu entity.
func (_u *MenuUpdate) SetParent(v *Menu) *MenuUpdate {
	return _u.SetParentID(v.ID)
}

// AddChildIDs adds the "children" edge to the Menu entity by IDs.
func (_u *MenuUpdate) AddChildIDs(ids ...uint64) *MenuUpdate {
	_u.mutation.AddChildIDs(ids...)
	return _u
}

// AddChildren adds the "children" edges to the Menu entity.
func (_u *MenuUpdate) AddChildren(v ...*Menu) *MenuUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddChildIDs(ids...)
}

// Mutation returns the MenuMutation object of the builder.
func (_u *MenuUpdate) Mutation() *MenuMutation {
	return _u.mutation
}

// ClearRoles clears all "roles" edges to the Role entity.
func (_u *MenuUpdate) ClearRoles() *MenuUpdate {
	_u.mutation.ClearRoles()
	return _u
}

// RemoveRoleIDs removes the "roles" edge to Role entities by IDs.
func (_u *MenuUpdate) RemoveRoleIDs(ids ...uint64) *MenuUpdate {
	_u.mutation.RemoveRoleIDs(ids...)
	return _u
}

// RemoveRoles removes "roles" edges to Role entities.
func (_u *MenuUpdate) RemoveRoles(v ...*Role) *MenuUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveRoleIDs(ids...)
}

// ClearParent clears the "parent" edge to the Menu entity.
func (_u *MenuUpdate) ClearParent() *MenuUpdate {
	_u.mutation.ClearParent()
	return _u
}

// ClearChildren clears all "children" edges to the Menu entity.
func (_u *MenuUpdate) ClearChildren() *MenuUpdate {
	_u.mutation.ClearChildren()
	return _u
}

// RemoveChildIDs removes the "children" edge to Menu entities by IDs.
func (_u *MenuUpdate) RemoveChildIDs(ids ...uint64) *MenuUpdate {
	_u.mutation.RemoveChildIDs(ids...)
	return _u
}

// RemoveChildren removes "children" edges to Menu entities.
func (_u *MenuUpdate) RemoveChildren(v ...*Menu) *MenuUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveChildIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *MenuUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *MenuUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *MenuUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *MenuUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *MenuUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := menu.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *MenuUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(menu.Table, menu.Columns, sqlgraph.NewFieldSpec(menu.FieldID, field.TypeUint64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(menu.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Sort(); ok {
		_spec.SetField(menu.FieldSort, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedSort(); ok {
		_spec.AddField(menu.FieldSort, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.MenuLevel(); ok {
		_spec.SetField(menu.FieldMenuLevel, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedMenuLevel(); ok {
		_spec.AddField(menu.FieldMenuLevel, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.MenuType(); ok {
		_spec.SetField(menu.FieldMenuType, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedMenuType(); ok {
		_spec.AddField(menu.FieldMenuType, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.Path(); ok {
		_spec.SetField(menu.FieldPath, field.TypeString, value)
	}
	if _u.mutation.PathCleared() {
		_spec.ClearField(menu.FieldPath, field.TypeString)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(menu.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Redirect(); ok {
		_spec.SetField(menu.FieldRedirect, field.TypeString, value)
	}
	if _u.mutation.RedirectCleared() {
		_spec.ClearField(menu.FieldRedirect, field.TypeString)
	}
	if value, ok := _u.mutation.Component(); ok {
		_spec.SetField(menu.FieldComponent, field.TypeString, value)
	}
	if _u.mutation.ComponentCleared() {
		_spec.ClearField(menu.FieldComponent, field.TypeString)
	}
	if value, ok := _u.mutation.Disabled(); ok {
		_spec.SetField(menu.FieldDisabled, field.TypeBool, value)
	}
	if _u.mutation.DisabledCleared() {
		_spec.ClearField(menu.FieldDisabled, field.TypeBool)
	}
	if value, ok := _u.mutation.ServiceName(); ok {
		_spec.SetField(menu.FieldServiceName, field.TypeString, value)
	}
	if _u.mutation.ServiceNameCleared() {
		_spec.ClearField(menu.FieldServiceName, field.TypeString)
	}
	if value, ok := _u.mutation.Permission(); ok {
		_spec.SetField(menu.FieldPermission, field.TypeString, value)
	}
	if _u.mutation.PermissionCleared() {
		_spec.ClearField(menu.FieldPermission, field.TypeString)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(menu.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.Icon(); ok {
		_spec.SetField(menu.FieldIcon, field.TypeString, value)
	}
	if value, ok := _u.mutation.Trans(); ok {
		_spec.SetField(menu.FieldTrans, field.TypeString, value)
	}
	if _u.mutation.TransCleared() {
		_spec.ClearField(menu.FieldTrans, field.TypeString)
	}
	if value, ok := _u.mutation.HideMenu(); ok {
		_spec.SetField(menu.FieldHideMenu, field.TypeBool, value)
	}
	if _u.mutation.HideMenuCleared() {
		_spec.ClearField(menu.FieldHideMenu, field.TypeBool)
	}
	if value, ok := _u.mutation.HideBreadcrumb(); ok {
		_spec.SetField(menu.FieldHideBreadcrumb, field.TypeBool, value)
	}
	if _u.mutation.HideBreadcrumbCleared() {
		_spec.ClearField(menu.FieldHideBreadcrumb, field.TypeBool)
	}
	if value, ok := _u.mutation.IgnoreKeepAlive(); ok {
		_spec.SetField(menu.FieldIgnoreKeepAlive, field.TypeBool, value)
	}
	if _u.mutation.IgnoreKeepAliveCleared() {
		_spec.ClearField(menu.FieldIgnoreKeepAlive, field.TypeBool)
	}
	if value, ok := _u.mutation.HideTab(); ok {
		_spec.SetField(menu.FieldHideTab, field.TypeBool, value)
	}
	if _u.mutation.HideTabCleared() {
		_spec.ClearField(menu.FieldHideTab, field.TypeBool)
	}
	if value, ok := _u.mutation.FrameSrc(); ok {
		_spec.SetField(menu.FieldFrameSrc, field.TypeString, value)
	}
	if _u.mutation.FrameSrcCleared() {
		_spec.ClearField(menu.FieldFrameSrc, field.TypeString)
	}
	if value, ok := _u.mutation.CarryParam(); ok {
		_spec.SetField(menu.FieldCarryParam, field.TypeBool, value)
	}
	if _u.mutation.CarryParamCleared() {
		_spec.ClearField(menu.FieldCarryParam, field.TypeBool)
	}
	if value, ok := _u.mutation.HideChildrenInMenu(); ok {
		_spec.SetField(menu.FieldHideChildrenInMenu, field.TypeBool, value)
	}
	if _u.mutation.HideChildrenInMenuCleared() {
		_spec.ClearField(menu.FieldHideChildrenInMenu, field.TypeBool)
	}
	if value, ok := _u.mutation.Affix(); ok {
		_spec.SetField(menu.FieldAffix, field.TypeBool, value)
	}
	if _u.mutation.AffixCleared() {
		_spec.ClearField(menu.FieldAffix, field.TypeBool)
	}
	if value, ok := _u.mutation.DynamicLevel(); ok {
		_spec.SetField(menu.FieldDynamicLevel, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedDynamicLevel(); ok {
		_spec.AddField(menu.FieldDynamicLevel, field.TypeUint32, value)
	}
	if _u.mutation.DynamicLevelCleared() {
		_spec.ClearField(menu.FieldDynamicLevel, field.TypeUint32)
	}
	if value, ok := _u.mutation.RealPath(); ok {
		_spec.SetField(menu.FieldRealPath, field.TypeString, value)
	}
	if _u.mutation.RealPathCleared() {
		_spec.ClearField(menu.FieldRealPath, field.TypeString)
	}
	if _u.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   menu.RolesTable,
			Columns: menu.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedRolesIDs(); len(nodes) > 0 && !_u.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   menu.RolesTable,
			Columns: menu.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   menu.RolesTable,
			Columns: menu.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   menu.ParentTable,
			Columns: []string{menu.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   menu.ParentTable,
			Columns: []string{menu.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ChildrenTable,
			Columns: []string{menu.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !_u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ChildrenTable,
			Columns: []string{menu.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ChildrenTable,
			Columns: []string{menu.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{menu.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// MenuUpdateOne is the builder for updating a single Menu entity.
type MenuUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MenuMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *MenuUpdateOne) SetUpdatedAt(v time.Time) *MenuUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetSort sets the "sort" field.
func (_u *MenuUpdateOne) SetSort(v uint32) *MenuUpdateOne {
	_u.mutation.ResetSort()
	_u.mutation.SetSort(v)
	return _u
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableSort(v *uint32) *MenuUpdateOne {
	if v != nil {
		_u.SetSort(*v)
	}
	return _u
}

// AddSort adds value to the "sort" field.
func (_u *MenuUpdateOne) AddSort(v int32) *MenuUpdateOne {
	_u.mutation.AddSort(v)
	return _u
}

// SetParentID sets the "parent_id" field.
func (_u *MenuUpdateOne) SetParentID(v uint64) *MenuUpdateOne {
	_u.mutation.SetParentID(v)
	return _u
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableParentID(v *uint64) *MenuUpdateOne {
	if v != nil {
		_u.SetParentID(*v)
	}
	return _u
}

// ClearParentID clears the value of the "parent_id" field.
func (_u *MenuUpdateOne) ClearParentID() *MenuUpdateOne {
	_u.mutation.ClearParentID()
	return _u
}

// SetMenuLevel sets the "menu_level" field.
func (_u *MenuUpdateOne) SetMenuLevel(v uint32) *MenuUpdateOne {
	_u.mutation.ResetMenuLevel()
	_u.mutation.SetMenuLevel(v)
	return _u
}

// SetNillableMenuLevel sets the "menu_level" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableMenuLevel(v *uint32) *MenuUpdateOne {
	if v != nil {
		_u.SetMenuLevel(*v)
	}
	return _u
}

// AddMenuLevel adds value to the "menu_level" field.
func (_u *MenuUpdateOne) AddMenuLevel(v int32) *MenuUpdateOne {
	_u.mutation.AddMenuLevel(v)
	return _u
}

// SetMenuType sets the "menu_type" field.
func (_u *MenuUpdateOne) SetMenuType(v uint32) *MenuUpdateOne {
	_u.mutation.ResetMenuType()
	_u.mutation.SetMenuType(v)
	return _u
}

// SetNillableMenuType sets the "menu_type" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableMenuType(v *uint32) *MenuUpdateOne {
	if v != nil {
		_u.SetMenuType(*v)
	}
	return _u
}

// AddMenuType adds value to the "menu_type" field.
func (_u *MenuUpdateOne) AddMenuType(v int32) *MenuUpdateOne {
	_u.mutation.AddMenuType(v)
	return _u
}

// SetPath sets the "path" field.
func (_u *MenuUpdateOne) SetPath(v string) *MenuUpdateOne {
	_u.mutation.SetPath(v)
	return _u
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillablePath(v *string) *MenuUpdateOne {
	if v != nil {
		_u.SetPath(*v)
	}
	return _u
}

// ClearPath clears the value of the "path" field.
func (_u *MenuUpdateOne) ClearPath() *MenuUpdateOne {
	_u.mutation.ClearPath()
	return _u
}

// SetName sets the "name" field.
func (_u *MenuUpdateOne) SetName(v string) *MenuUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableName(v *string) *MenuUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetRedirect sets the "redirect" field.
func (_u *MenuUpdateOne) SetRedirect(v string) *MenuUpdateOne {
	_u.mutation.SetRedirect(v)
	return _u
}

// SetNillableRedirect sets the "redirect" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableRedirect(v *string) *MenuUpdateOne {
	if v != nil {
		_u.SetRedirect(*v)
	}
	return _u
}

// ClearRedirect clears the value of the "redirect" field.
func (_u *MenuUpdateOne) ClearRedirect() *MenuUpdateOne {
	_u.mutation.ClearRedirect()
	return _u
}

// SetComponent sets the "component" field.
func (_u *MenuUpdateOne) SetComponent(v string) *MenuUpdateOne {
	_u.mutation.SetComponent(v)
	return _u
}

// SetNillableComponent sets the "component" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableComponent(v *string) *MenuUpdateOne {
	if v != nil {
		_u.SetComponent(*v)
	}
	return _u
}

// ClearComponent clears the value of the "component" field.
func (_u *MenuUpdateOne) ClearComponent() *MenuUpdateOne {
	_u.mutation.ClearComponent()
	return _u
}

// SetDisabled sets the "disabled" field.
func (_u *MenuUpdateOne) SetDisabled(v bool) *MenuUpdateOne {
	_u.mutation.SetDisabled(v)
	return _u
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableDisabled(v *bool) *MenuUpdateOne {
	if v != nil {
		_u.SetDisabled(*v)
	}
	return _u
}

// ClearDisabled clears the value of the "disabled" field.
func (_u *MenuUpdateOne) ClearDisabled() *MenuUpdateOne {
	_u.mutation.ClearDisabled()
	return _u
}

// SetServiceName sets the "service_name" field.
func (_u *MenuUpdateOne) SetServiceName(v string) *MenuUpdateOne {
	_u.mutation.SetServiceName(v)
	return _u
}

// SetNillableServiceName sets the "service_name" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableServiceName(v *string) *MenuUpdateOne {
	if v != nil {
		_u.SetServiceName(*v)
	}
	return _u
}

// ClearServiceName clears the value of the "service_name" field.
func (_u *MenuUpdateOne) ClearServiceName() *MenuUpdateOne {
	_u.mutation.ClearServiceName()
	return _u
}

// SetPermission sets the "permission" field.
func (_u *MenuUpdateOne) SetPermission(v string) *MenuUpdateOne {
	_u.mutation.SetPermission(v)
	return _u
}

// SetNillablePermission sets the "permission" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillablePermission(v *string) *MenuUpdateOne {
	if v != nil {
		_u.SetPermission(*v)
	}
	return _u
}

// ClearPermission clears the value of the "permission" field.
func (_u *MenuUpdateOne) ClearPermission() *MenuUpdateOne {
	_u.mutation.ClearPermission()
	return _u
}

// SetTitle sets the "title" field.
func (_u *MenuUpdateOne) SetTitle(v string) *MenuUpdateOne {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableTitle(v *string) *MenuUpdateOne {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetIcon sets the "icon" field.
func (_u *MenuUpdateOne) SetIcon(v string) *MenuUpdateOne {
	_u.mutation.SetIcon(v)
	return _u
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableIcon(v *string) *MenuUpdateOne {
	if v != nil {
		_u.SetIcon(*v)
	}
	return _u
}

// SetTrans sets the "trans" field.
func (_u *MenuUpdateOne) SetTrans(v string) *MenuUpdateOne {
	_u.mutation.SetTrans(v)
	return _u
}

// SetNillableTrans sets the "trans" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableTrans(v *string) *MenuUpdateOne {
	if v != nil {
		_u.SetTrans(*v)
	}
	return _u
}

// ClearTrans clears the value of the "trans" field.
func (_u *MenuUpdateOne) ClearTrans() *MenuUpdateOne {
	_u.mutation.ClearTrans()
	return _u
}

// SetHideMenu sets the "hide_menu" field.
func (_u *MenuUpdateOne) SetHideMenu(v bool) *MenuUpdateOne {
	_u.mutation.SetHideMenu(v)
	return _u
}

// SetNillableHideMenu sets the "hide_menu" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableHideMenu(v *bool) *MenuUpdateOne {
	if v != nil {
		_u.SetHideMenu(*v)
	}
	return _u
}

// ClearHideMenu clears the value of the "hide_menu" field.
func (_u *MenuUpdateOne) ClearHideMenu() *MenuUpdateOne {
	_u.mutation.ClearHideMenu()
	return _u
}

// SetHideBreadcrumb sets the "hide_breadcrumb" field.
func (_u *MenuUpdateOne) SetHideBreadcrumb(v bool) *MenuUpdateOne {
	_u.mutation.SetHideBreadcrumb(v)
	return _u
}

// SetNillableHideBreadcrumb sets the "hide_breadcrumb" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableHideBreadcrumb(v *bool) *MenuUpdateOne {
	if v != nil {
		_u.SetHideBreadcrumb(*v)
	}
	return _u
}

// ClearHideBreadcrumb clears the value of the "hide_breadcrumb" field.
func (_u *MenuUpdateOne) ClearHideBreadcrumb() *MenuUpdateOne {
	_u.mutation.ClearHideBreadcrumb()
	return _u
}

// SetIgnoreKeepAlive sets the "ignore_keep_alive" field.
func (_u *MenuUpdateOne) SetIgnoreKeepAlive(v bool) *MenuUpdateOne {
	_u.mutation.SetIgnoreKeepAlive(v)
	return _u
}

// SetNillableIgnoreKeepAlive sets the "ignore_keep_alive" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableIgnoreKeepAlive(v *bool) *MenuUpdateOne {
	if v != nil {
		_u.SetIgnoreKeepAlive(*v)
	}
	return _u
}

// ClearIgnoreKeepAlive clears the value of the "ignore_keep_alive" field.
func (_u *MenuUpdateOne) ClearIgnoreKeepAlive() *MenuUpdateOne {
	_u.mutation.ClearIgnoreKeepAlive()
	return _u
}

// SetHideTab sets the "hide_tab" field.
func (_u *MenuUpdateOne) SetHideTab(v bool) *MenuUpdateOne {
	_u.mutation.SetHideTab(v)
	return _u
}

// SetNillableHideTab sets the "hide_tab" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableHideTab(v *bool) *MenuUpdateOne {
	if v != nil {
		_u.SetHideTab(*v)
	}
	return _u
}

// ClearHideTab clears the value of the "hide_tab" field.
func (_u *MenuUpdateOne) ClearHideTab() *MenuUpdateOne {
	_u.mutation.ClearHideTab()
	return _u
}

// SetFrameSrc sets the "frame_src" field.
func (_u *MenuUpdateOne) SetFrameSrc(v string) *MenuUpdateOne {
	_u.mutation.SetFrameSrc(v)
	return _u
}

// SetNillableFrameSrc sets the "frame_src" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableFrameSrc(v *string) *MenuUpdateOne {
	if v != nil {
		_u.SetFrameSrc(*v)
	}
	return _u
}

// ClearFrameSrc clears the value of the "frame_src" field.
func (_u *MenuUpdateOne) ClearFrameSrc() *MenuUpdateOne {
	_u.mutation.ClearFrameSrc()
	return _u
}

// SetCarryParam sets the "carry_param" field.
func (_u *MenuUpdateOne) SetCarryParam(v bool) *MenuUpdateOne {
	_u.mutation.SetCarryParam(v)
	return _u
}

// SetNillableCarryParam sets the "carry_param" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableCarryParam(v *bool) *MenuUpdateOne {
	if v != nil {
		_u.SetCarryParam(*v)
	}
	return _u
}

// ClearCarryParam clears the value of the "carry_param" field.
func (_u *MenuUpdateOne) ClearCarryParam() *MenuUpdateOne {
	_u.mutation.ClearCarryParam()
	return _u
}

// SetHideChildrenInMenu sets the "hide_children_in_menu" field.
func (_u *MenuUpdateOne) SetHideChildrenInMenu(v bool) *MenuUpdateOne {
	_u.mutation.SetHideChildrenInMenu(v)
	return _u
}

// SetNillableHideChildrenInMenu sets the "hide_children_in_menu" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableHideChildrenInMenu(v *bool) *MenuUpdateOne {
	if v != nil {
		_u.SetHideChildrenInMenu(*v)
	}
	return _u
}

// ClearHideChildrenInMenu clears the value of the "hide_children_in_menu" field.
func (_u *MenuUpdateOne) ClearHideChildrenInMenu() *MenuUpdateOne {
	_u.mutation.ClearHideChildrenInMenu()
	return _u
}

// SetAffix sets the "affix" field.
func (_u *MenuUpdateOne) SetAffix(v bool) *MenuUpdateOne {
	_u.mutation.SetAffix(v)
	return _u
}

// SetNillableAffix sets the "affix" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableAffix(v *bool) *MenuUpdateOne {
	if v != nil {
		_u.SetAffix(*v)
	}
	return _u
}

// ClearAffix clears the value of the "affix" field.
func (_u *MenuUpdateOne) ClearAffix() *MenuUpdateOne {
	_u.mutation.ClearAffix()
	return _u
}

// SetDynamicLevel sets the "dynamic_level" field.
func (_u *MenuUpdateOne) SetDynamicLevel(v uint32) *MenuUpdateOne {
	_u.mutation.ResetDynamicLevel()
	_u.mutation.SetDynamicLevel(v)
	return _u
}

// SetNillableDynamicLevel sets the "dynamic_level" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableDynamicLevel(v *uint32) *MenuUpdateOne {
	if v != nil {
		_u.SetDynamicLevel(*v)
	}
	return _u
}

// AddDynamicLevel adds value to the "dynamic_level" field.
func (_u *MenuUpdateOne) AddDynamicLevel(v int32) *MenuUpdateOne {
	_u.mutation.AddDynamicLevel(v)
	return _u
}

// ClearDynamicLevel clears the value of the "dynamic_level" field.
func (_u *MenuUpdateOne) ClearDynamicLevel() *MenuUpdateOne {
	_u.mutation.ClearDynamicLevel()
	return _u
}

// SetRealPath sets the "real_path" field.
func (_u *MenuUpdateOne) SetRealPath(v string) *MenuUpdateOne {
	_u.mutation.SetRealPath(v)
	return _u
}

// SetNillableRealPath sets the "real_path" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableRealPath(v *string) *MenuUpdateOne {
	if v != nil {
		_u.SetRealPath(*v)
	}
	return _u
}

// ClearRealPath clears the value of the "real_path" field.
func (_u *MenuUpdateOne) ClearRealPath() *MenuUpdateOne {
	_u.mutation.ClearRealPath()
	return _u
}

// AddRoleIDs adds the "roles" edge to the Role entity by IDs.
func (_u *MenuUpdateOne) AddRoleIDs(ids ...uint64) *MenuUpdateOne {
	_u.mutation.AddRoleIDs(ids...)
	return _u
}

// AddRoles adds the "roles" edges to the Role entity.
func (_u *MenuUpdateOne) AddRoles(v ...*Role) *MenuUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddRoleIDs(ids...)
}

// SetParent sets the "parent" edge to the Menu entity.
func (_u *MenuUpdateOne) SetParent(v *Menu) *MenuUpdateOne {
	return _u.SetParentID(v.ID)
}

// AddChildIDs adds the "children" edge to the Menu entity by IDs.
func (_u *MenuUpdateOne) AddChildIDs(ids ...uint64) *MenuUpdateOne {
	_u.mutation.AddChildIDs(ids...)
	return _u
}

// AddChildren adds the "children" edges to the Menu entity.
func (_u *MenuUpdateOne) AddChildren(v ...*Menu) *MenuUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddChildIDs(ids...)
}

// Mutation returns the MenuMutation object of the builder.
func (_u *MenuUpdateOne) Mutation() *MenuMutation {
	return _u.mutation
}

// ClearRoles clears all "roles" edges to the Role entity.
func (_u *MenuUpdateOne) ClearRoles() *MenuUpdateOne {
	_u.mutation.ClearRoles()
	return _u
}

// RemoveRoleIDs removes the "roles" edge to Role entities by IDs.
func (_u *MenuUpdateOne) RemoveRoleIDs(ids ...uint64) *MenuUpdateOne {
	_u.mutation.RemoveRoleIDs(ids...)
	return _u
}

// RemoveRoles removes "roles" edges to Role entities.
func (_u *MenuUpdateOne) RemoveRoles(v ...*Role) *MenuUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveRoleIDs(ids...)
}

// ClearParent clears the "parent" edge to the Menu entity.
func (_u *MenuUpdateOne) ClearParent() *MenuUpdateOne {
	_u.mutation.ClearParent()
	return _u
}

// ClearChildren clears all "children" edges to the Menu entity.
func (_u *MenuUpdateOne) ClearChildren() *MenuUpdateOne {
	_u.mutation.ClearChildren()
	return _u
}

// RemoveChildIDs removes the "children" edge to Menu entities by IDs.
func (_u *MenuUpdateOne) RemoveChildIDs(ids ...uint64) *MenuUpdateOne {
	_u.mutation.RemoveChildIDs(ids...)
	return _u
}

// RemoveChildren removes "children" edges to Menu entities.
func (_u *MenuUpdateOne) RemoveChildren(v ...*Menu) *MenuUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveChildIDs(ids...)
}

// Where appends a list predicates to the MenuUpdate builder.
func (_u *MenuUpdateOne) Where(ps ...predicate.Menu) *MenuUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *MenuUpdateOne) Select(field string, fields ...string) *MenuUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Menu entity.
func (_u *MenuUpdateOne) Save(ctx context.Context) (*Menu, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *MenuUpdateOne) SaveX(ctx context.Context) *Menu {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *MenuUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *MenuUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *MenuUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := menu.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *MenuUpdateOne) sqlSave(ctx context.Context) (_node *Menu, err error) {
	_spec := sqlgraph.NewUpdateSpec(menu.Table, menu.Columns, sqlgraph.NewFieldSpec(menu.FieldID, field.TypeUint64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Menu.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, menu.FieldID)
		for _, f := range fields {
			if !menu.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != menu.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(menu.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Sort(); ok {
		_spec.SetField(menu.FieldSort, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedSort(); ok {
		_spec.AddField(menu.FieldSort, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.MenuLevel(); ok {
		_spec.SetField(menu.FieldMenuLevel, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedMenuLevel(); ok {
		_spec.AddField(menu.FieldMenuLevel, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.MenuType(); ok {
		_spec.SetField(menu.FieldMenuType, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedMenuType(); ok {
		_spec.AddField(menu.FieldMenuType, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.Path(); ok {
		_spec.SetField(menu.FieldPath, field.TypeString, value)
	}
	if _u.mutation.PathCleared() {
		_spec.ClearField(menu.FieldPath, field.TypeString)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(menu.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Redirect(); ok {
		_spec.SetField(menu.FieldRedirect, field.TypeString, value)
	}
	if _u.mutation.RedirectCleared() {
		_spec.ClearField(menu.FieldRedirect, field.TypeString)
	}
	if value, ok := _u.mutation.Component(); ok {
		_spec.SetField(menu.FieldComponent, field.TypeString, value)
	}
	if _u.mutation.ComponentCleared() {
		_spec.ClearField(menu.FieldComponent, field.TypeString)
	}
	if value, ok := _u.mutation.Disabled(); ok {
		_spec.SetField(menu.FieldDisabled, field.TypeBool, value)
	}
	if _u.mutation.DisabledCleared() {
		_spec.ClearField(menu.FieldDisabled, field.TypeBool)
	}
	if value, ok := _u.mutation.ServiceName(); ok {
		_spec.SetField(menu.FieldServiceName, field.TypeString, value)
	}
	if _u.mutation.ServiceNameCleared() {
		_spec.ClearField(menu.FieldServiceName, field.TypeString)
	}
	if value, ok := _u.mutation.Permission(); ok {
		_spec.SetField(menu.FieldPermission, field.TypeString, value)
	}
	if _u.mutation.PermissionCleared() {
		_spec.ClearField(menu.FieldPermission, field.TypeString)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(menu.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.Icon(); ok {
		_spec.SetField(menu.FieldIcon, field.TypeString, value)
	}
	if value, ok := _u.mutation.Trans(); ok {
		_spec.SetField(menu.FieldTrans, field.TypeString, value)
	}
	if _u.mutation.TransCleared() {
		_spec.ClearField(menu.FieldTrans, field.TypeString)
	}
	if value, ok := _u.mutation.HideMenu(); ok {
		_spec.SetField(menu.FieldHideMenu, field.TypeBool, value)
	}
	if _u.mutation.HideMenuCleared() {
		_spec.ClearField(menu.FieldHideMenu, field.TypeBool)
	}
	if value, ok := _u.mutation.HideBreadcrumb(); ok {
		_spec.SetField(menu.FieldHideBreadcrumb, field.TypeBool, value)
	}
	if _u.mutation.HideBreadcrumbCleared() {
		_spec.ClearField(menu.FieldHideBreadcrumb, field.TypeBool)
	}
	if value, ok := _u.mutation.IgnoreKeepAlive(); ok {
		_spec.SetField(menu.FieldIgnoreKeepAlive, field.TypeBool, value)
	}
	if _u.mutation.IgnoreKeepAliveCleared() {
		_spec.ClearField(menu.FieldIgnoreKeepAlive, field.TypeBool)
	}
	if value, ok := _u.mutation.HideTab(); ok {
		_spec.SetField(menu.FieldHideTab, field.TypeBool, value)
	}
	if _u.mutation.HideTabCleared() {
		_spec.ClearField(menu.FieldHideTab, field.TypeBool)
	}
	if value, ok := _u.mutation.FrameSrc(); ok {
		_spec.SetField(menu.FieldFrameSrc, field.TypeString, value)
	}
	if _u.mutation.FrameSrcCleared() {
		_spec.ClearField(menu.FieldFrameSrc, field.TypeString)
	}
	if value, ok := _u.mutation.CarryParam(); ok {
		_spec.SetField(menu.FieldCarryParam, field.TypeBool, value)
	}
	if _u.mutation.CarryParamCleared() {
		_spec.ClearField(menu.FieldCarryParam, field.TypeBool)
	}
	if value, ok := _u.mutation.HideChildrenInMenu(); ok {
		_spec.SetField(menu.FieldHideChildrenInMenu, field.TypeBool, value)
	}
	if _u.mutation.HideChildrenInMenuCleared() {
		_spec.ClearField(menu.FieldHideChildrenInMenu, field.TypeBool)
	}
	if value, ok := _u.mutation.Affix(); ok {
		_spec.SetField(menu.FieldAffix, field.TypeBool, value)
	}
	if _u.mutation.AffixCleared() {
		_spec.ClearField(menu.FieldAffix, field.TypeBool)
	}
	if value, ok := _u.mutation.DynamicLevel(); ok {
		_spec.SetField(menu.FieldDynamicLevel, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedDynamicLevel(); ok {
		_spec.AddField(menu.FieldDynamicLevel, field.TypeUint32, value)
	}
	if _u.mutation.DynamicLevelCleared() {
		_spec.ClearField(menu.FieldDynamicLevel, field.TypeUint32)
	}
	if value, ok := _u.mutation.RealPath(); ok {
		_spec.SetField(menu.FieldRealPath, field.TypeString, value)
	}
	if _u.mutation.RealPathCleared() {
		_spec.ClearField(menu.FieldRealPath, field.TypeString)
	}
	if _u.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   menu.RolesTable,
			Columns: menu.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedRolesIDs(); len(nodes) > 0 && !_u.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   menu.RolesTable,
			Columns: menu.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   menu.RolesTable,
			Columns: menu.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   menu.ParentTable,
			Columns: []string{menu.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   menu.ParentTable,
			Columns: []string{menu.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ChildrenTable,
			Columns: []string{menu.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !_u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ChildrenTable,
			Columns: []string{menu.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ChildrenTable,
			Columns: []string{menu.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Menu{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{menu.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
