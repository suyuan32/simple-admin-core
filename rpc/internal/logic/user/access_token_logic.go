package user

import (
	"context"
	"time"

	"github.com/chimerakang/simple-admin-core/rpc/ent/user"
	"github.com/chimerakang/simple-admin-core/rpc/internal/svc"
	"github.com/chimerakang/simple-admin-core/rpc/internal/utils/dberrorhandler"
	"github.com/chimerakang/simple-admin-core/rpc/types/core"
	"github.com/google/uuid"

	"github.com/zeromicro/go-zero/core/errorx"
	"github.com/zeromicro/go-zero/core/logx"
)

type AccessTokenLogic struct {
	ctx    context.Context
	svcCtx *svc.ServiceContext
	logx.Logger
}

func NewAccessTokenLogic(ctx context.Context, svcCtx *svc.ServiceContext) *AccessTokenLogic {
	return &AccessTokenLogic{
		ctx:    ctx,
		svcCtx: svcCtx,
		Logger: logx.WithContext(ctx),
	}
}

// AccessToken generates a short-lived access token
// Note: Actual JWT token generation happens in API layer
func (l *AccessTokenLogic) AccessToken(in *core.Empty) (*core.RefreshTokenResp, error) {
	// Get user ID from context
	userId, ok := l.ctx.Value("userId").(string)
	if !ok || userId == "" {
		return nil, errorx.NewCodeUnauthenticatedError("common.unauthorized")
	}

	// Parse UUID
	userUUID, err := uuid.Parse(userId)
	if err != nil {
		return nil, errorx.NewCodeInvalidArgumentError("common.invalidUserId")
	}

	// Verify user exists and is active
	userInfo, err := l.svcCtx.DB.User.Get(l.ctx, userUUID)
	if err != nil {
		return nil, dberrorhandler.DefaultEntError(l.Logger, err, in)
	}

	// Check if user is active
	if userInfo.Status != 1 {
		return nil, errorx.NewCodeAbortedError("login.userBanned")
	}

	// Return success with shorter expiry (e.g., 2 hours)
	expiredAt := time.Now().Add(2 * time.Hour).Unix()

	return &core.RefreshTokenResp{
		Code: 0,
		Msg:  "common.success",
		Data: &core.RefreshTokenInfo{
			// Token will be generated by API layer
			Token:     "",
			ExpiredAt: expiredAt,
		},
	}, nil
}
