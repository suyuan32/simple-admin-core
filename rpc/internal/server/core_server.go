// Code generated by goctl. DO NOT EDIT.
// goctl 1.9.1
// Source: core.proto

package server

import (
	"context"

	"github.com/chimerakang/simple-admin-core/rpc/internal/logic"
	"github.com/chimerakang/simple-admin-core/rpc/internal/svc"
	"github.com/chimerakang/simple-admin-core/rpc/types/core"
)

type CoreServer struct {
	svcCtx *svc.ServiceContext
	core.UnimplementedCoreServer
}

func NewCoreServer(svcCtx *svc.ServiceContext) *CoreServer {
	return &CoreServer{
		svcCtx: svcCtx,
	}
}

// API management
func (s *CoreServer) CreateApi(ctx context.Context, in *core.ApiInfo) (*core.BaseIDResp, error) {
	l := logic.NewCreateApiLogic(ctx, s.svcCtx)
	return l.CreateApi(in)
}

// group: api
func (s *CoreServer) UpdateApi(ctx context.Context, in *core.ApiInfo) (*core.BaseResp, error) {
	l := logic.NewUpdateApiLogic(ctx, s.svcCtx)
	return l.UpdateApi(in)
}

// group: api
func (s *CoreServer) GetApiList(ctx context.Context, in *core.ApiListReq) (*core.ApiListResp, error) {
	l := logic.NewGetApiListLogic(ctx, s.svcCtx)
	return l.GetApiList(in)
}

// group: api
func (s *CoreServer) GetApiById(ctx context.Context, in *core.IDReq) (*core.ApiInfo, error) {
	l := logic.NewGetApiByIdLogic(ctx, s.svcCtx)
	return l.GetApiById(in)
}

// group: api
func (s *CoreServer) DeleteApi(ctx context.Context, in *core.IDsReq) (*core.BaseResp, error) {
	l := logic.NewDeleteApiLogic(ctx, s.svcCtx)
	return l.DeleteApi(in)
}

// group: authority
func (s *CoreServer) GetMenuAuthority(ctx context.Context, in *core.IDReq) (*core.RoleMenuAuthorityResp, error) {
	l := logic.NewGetMenuAuthorityLogic(ctx, s.svcCtx)
	return l.GetMenuAuthority(in)
}

// group: authority
func (s *CoreServer) CreateOrUpdateMenuAuthority(ctx context.Context, in *core.RoleMenuAuthorityReq) (*core.BaseResp, error) {
	l := logic.NewCreateOrUpdateMenuAuthorityLogic(ctx, s.svcCtx)
	return l.CreateOrUpdateMenuAuthority(in)
}

// group: base
func (s *CoreServer) InitDatabase(ctx context.Context, in *core.Empty) (*core.BaseResp, error) {
	l := logic.NewInitDatabaseLogic(ctx, s.svcCtx)
	return l.InitDatabase(in)
}

// Configuration management
func (s *CoreServer) CreateConfiguration(ctx context.Context, in *core.ConfigurationInfo) (*core.BaseIDResp, error) {
	l := logic.NewCreateConfigurationLogic(ctx, s.svcCtx)
	return l.CreateConfiguration(in)
}

// group: configuration
func (s *CoreServer) UpdateConfiguration(ctx context.Context, in *core.ConfigurationInfo) (*core.BaseResp, error) {
	l := logic.NewUpdateConfigurationLogic(ctx, s.svcCtx)
	return l.UpdateConfiguration(in)
}

// group: configuration
func (s *CoreServer) GetConfigurationList(ctx context.Context, in *core.ConfigurationListReq) (*core.ConfigurationListResp, error) {
	l := logic.NewGetConfigurationListLogic(ctx, s.svcCtx)
	return l.GetConfigurationList(in)
}

// group: configuration
func (s *CoreServer) GetConfigurationById(ctx context.Context, in *core.IDReq) (*core.ConfigurationInfo, error) {
	l := logic.NewGetConfigurationByIdLogic(ctx, s.svcCtx)
	return l.GetConfigurationById(in)
}

// group: configuration
func (s *CoreServer) DeleteConfiguration(ctx context.Context, in *core.IDsReq) (*core.BaseResp, error) {
	l := logic.NewDeleteConfigurationLogic(ctx, s.svcCtx)
	return l.DeleteConfiguration(in)
}

// Department management
func (s *CoreServer) CreateDepartment(ctx context.Context, in *core.DepartmentInfo) (*core.BaseIDResp, error) {
	l := logic.NewCreateDepartmentLogic(ctx, s.svcCtx)
	return l.CreateDepartment(in)
}

// group: department
func (s *CoreServer) UpdateDepartment(ctx context.Context, in *core.DepartmentInfo) (*core.BaseResp, error) {
	l := logic.NewUpdateDepartmentLogic(ctx, s.svcCtx)
	return l.UpdateDepartment(in)
}

// group: department
func (s *CoreServer) GetDepartmentList(ctx context.Context, in *core.DepartmentListReq) (*core.DepartmentListResp, error) {
	l := logic.NewGetDepartmentListLogic(ctx, s.svcCtx)
	return l.GetDepartmentList(in)
}

// group: department
func (s *CoreServer) GetDepartmentById(ctx context.Context, in *core.IDReq) (*core.DepartmentInfo, error) {
	l := logic.NewGetDepartmentByIdLogic(ctx, s.svcCtx)
	return l.GetDepartmentById(in)
}

// group: department
func (s *CoreServer) DeleteDepartment(ctx context.Context, in *core.IDsReq) (*core.BaseResp, error) {
	l := logic.NewDeleteDepartmentLogic(ctx, s.svcCtx)
	return l.DeleteDepartment(in)
}

// Dictionary management
func (s *CoreServer) CreateDictionary(ctx context.Context, in *core.DictionaryInfo) (*core.BaseIDResp, error) {
	l := logic.NewCreateDictionaryLogic(ctx, s.svcCtx)
	return l.CreateDictionary(in)
}

// group: dictionary
func (s *CoreServer) UpdateDictionary(ctx context.Context, in *core.DictionaryInfo) (*core.BaseResp, error) {
	l := logic.NewUpdateDictionaryLogic(ctx, s.svcCtx)
	return l.UpdateDictionary(in)
}

// group: dictionary
func (s *CoreServer) GetDictionaryList(ctx context.Context, in *core.DictionaryListReq) (*core.DictionaryListResp, error) {
	l := logic.NewGetDictionaryListLogic(ctx, s.svcCtx)
	return l.GetDictionaryList(in)
}

// group: dictionary
func (s *CoreServer) GetDictionaryById(ctx context.Context, in *core.IDReq) (*core.DictionaryInfo, error) {
	l := logic.NewGetDictionaryByIdLogic(ctx, s.svcCtx)
	return l.GetDictionaryById(in)
}

// group: dictionary
func (s *CoreServer) DeleteDictionary(ctx context.Context, in *core.IDsReq) (*core.BaseResp, error) {
	l := logic.NewDeleteDictionaryLogic(ctx, s.svcCtx)
	return l.DeleteDictionary(in)
}

// DictionaryDetail management
func (s *CoreServer) CreateDictionaryDetail(ctx context.Context, in *core.DictionaryDetailInfo) (*core.BaseIDResp, error) {
	l := logic.NewCreateDictionaryDetailLogic(ctx, s.svcCtx)
	return l.CreateDictionaryDetail(in)
}

// group: dictionarydetail
func (s *CoreServer) UpdateDictionaryDetail(ctx context.Context, in *core.DictionaryDetailInfo) (*core.BaseResp, error) {
	l := logic.NewUpdateDictionaryDetailLogic(ctx, s.svcCtx)
	return l.UpdateDictionaryDetail(in)
}

// group: dictionarydetail
func (s *CoreServer) GetDictionaryDetailList(ctx context.Context, in *core.DictionaryDetailListReq) (*core.DictionaryDetailListResp, error) {
	l := logic.NewGetDictionaryDetailListLogic(ctx, s.svcCtx)
	return l.GetDictionaryDetailList(in)
}

// group: dictionarydetail
func (s *CoreServer) GetDictionaryDetailById(ctx context.Context, in *core.IDReq) (*core.DictionaryDetailInfo, error) {
	l := logic.NewGetDictionaryDetailByIdLogic(ctx, s.svcCtx)
	return l.GetDictionaryDetailById(in)
}

// group: dictionarydetail
func (s *CoreServer) DeleteDictionaryDetail(ctx context.Context, in *core.IDsReq) (*core.BaseResp, error) {
	l := logic.NewDeleteDictionaryDetailLogic(ctx, s.svcCtx)
	return l.DeleteDictionaryDetail(in)
}

// group: dictionarydetail
func (s *CoreServer) GetDictionaryDetailByDictionaryName(ctx context.Context, in *core.BaseMsg) (*core.DictionaryDetailListResp, error) {
	l := logic.NewGetDictionaryDetailByDictionaryNameLogic(ctx, s.svcCtx)
	return l.GetDictionaryDetailByDictionaryName(in)
}

// group: menu
func (s *CoreServer) CreateMenu(ctx context.Context, in *core.MenuInfo) (*core.BaseIDResp, error) {
	l := logic.NewCreateMenuLogic(ctx, s.svcCtx)
	return l.CreateMenu(in)
}

// group: menu
func (s *CoreServer) UpdateMenu(ctx context.Context, in *core.MenuInfo) (*core.BaseResp, error) {
	l := logic.NewUpdateMenuLogic(ctx, s.svcCtx)
	return l.UpdateMenu(in)
}

// group: menu
func (s *CoreServer) DeleteMenu(ctx context.Context, in *core.IDReq) (*core.BaseResp, error) {
	l := logic.NewDeleteMenuLogic(ctx, s.svcCtx)
	return l.DeleteMenu(in)
}

// group: menu
func (s *CoreServer) GetMenuListByRole(ctx context.Context, in *core.BaseMsg) (*core.MenuInfoList, error) {
	l := logic.NewGetMenuListByRoleLogic(ctx, s.svcCtx)
	return l.GetMenuListByRole(in)
}

// group: menu
func (s *CoreServer) GetMenuList(ctx context.Context, in *core.PageInfoReq) (*core.MenuInfoList, error) {
	l := logic.NewGetMenuListLogic(ctx, s.svcCtx)
	return l.GetMenuList(in)
}

// OauthProvider management
func (s *CoreServer) CreateOauthProvider(ctx context.Context, in *core.OauthProviderInfo) (*core.BaseIDResp, error) {
	l := logic.NewCreateOauthProviderLogic(ctx, s.svcCtx)
	return l.CreateOauthProvider(in)
}

// group: oauthprovider
func (s *CoreServer) UpdateOauthProvider(ctx context.Context, in *core.OauthProviderInfo) (*core.BaseResp, error) {
	l := logic.NewUpdateOauthProviderLogic(ctx, s.svcCtx)
	return l.UpdateOauthProvider(in)
}

// group: oauthprovider
func (s *CoreServer) GetOauthProviderList(ctx context.Context, in *core.OauthProviderListReq) (*core.OauthProviderListResp, error) {
	l := logic.NewGetOauthProviderListLogic(ctx, s.svcCtx)
	return l.GetOauthProviderList(in)
}

// group: oauthprovider
func (s *CoreServer) GetOauthProviderById(ctx context.Context, in *core.IDReq) (*core.OauthProviderInfo, error) {
	l := logic.NewGetOauthProviderByIdLogic(ctx, s.svcCtx)
	return l.GetOauthProviderById(in)
}

// group: oauthprovider
func (s *CoreServer) DeleteOauthProvider(ctx context.Context, in *core.IDsReq) (*core.BaseResp, error) {
	l := logic.NewDeleteOauthProviderLogic(ctx, s.svcCtx)
	return l.DeleteOauthProvider(in)
}

// group: oauthprovider
func (s *CoreServer) OauthLogin(ctx context.Context, in *core.OauthLoginReq) (*core.OauthRedirectResp, error) {
	l := logic.NewOauthLoginLogic(ctx, s.svcCtx)
	return l.OauthLogin(in)
}

// group: oauthprovider
func (s *CoreServer) OauthCallback(ctx context.Context, in *core.CallbackReq) (*core.UserInfo, error) {
	l := logic.NewOauthCallbackLogic(ctx, s.svcCtx)
	return l.OauthCallback(in)
}

// Position management
func (s *CoreServer) CreatePosition(ctx context.Context, in *core.PositionInfo) (*core.BaseIDResp, error) {
	l := logic.NewCreatePositionLogic(ctx, s.svcCtx)
	return l.CreatePosition(in)
}

// group: position
func (s *CoreServer) UpdatePosition(ctx context.Context, in *core.PositionInfo) (*core.BaseResp, error) {
	l := logic.NewUpdatePositionLogic(ctx, s.svcCtx)
	return l.UpdatePosition(in)
}

// group: position
func (s *CoreServer) GetPositionList(ctx context.Context, in *core.PositionListReq) (*core.PositionListResp, error) {
	l := logic.NewGetPositionListLogic(ctx, s.svcCtx)
	return l.GetPositionList(in)
}

// group: position
func (s *CoreServer) GetPositionById(ctx context.Context, in *core.IDReq) (*core.PositionInfo, error) {
	l := logic.NewGetPositionByIdLogic(ctx, s.svcCtx)
	return l.GetPositionById(in)
}

// group: position
func (s *CoreServer) DeletePosition(ctx context.Context, in *core.IDsReq) (*core.BaseResp, error) {
	l := logic.NewDeletePositionLogic(ctx, s.svcCtx)
	return l.DeletePosition(in)
}

// Role management
func (s *CoreServer) CreateRole(ctx context.Context, in *core.RoleInfo) (*core.BaseIDResp, error) {
	l := logic.NewCreateRoleLogic(ctx, s.svcCtx)
	return l.CreateRole(in)
}

// group: role
func (s *CoreServer) UpdateRole(ctx context.Context, in *core.RoleInfo) (*core.BaseResp, error) {
	l := logic.NewUpdateRoleLogic(ctx, s.svcCtx)
	return l.UpdateRole(in)
}

// group: role
func (s *CoreServer) GetRoleList(ctx context.Context, in *core.RoleListReq) (*core.RoleListResp, error) {
	l := logic.NewGetRoleListLogic(ctx, s.svcCtx)
	return l.GetRoleList(in)
}

// group: role
func (s *CoreServer) GetRoleById(ctx context.Context, in *core.IDReq) (*core.RoleInfo, error) {
	l := logic.NewGetRoleByIdLogic(ctx, s.svcCtx)
	return l.GetRoleById(in)
}

// group: role
func (s *CoreServer) DeleteRole(ctx context.Context, in *core.IDsReq) (*core.BaseResp, error) {
	l := logic.NewDeleteRoleLogic(ctx, s.svcCtx)
	return l.DeleteRole(in)
}

// Token management
func (s *CoreServer) CreateToken(ctx context.Context, in *core.TokenInfo) (*core.BaseUUIDResp, error) {
	l := logic.NewCreateTokenLogic(ctx, s.svcCtx)
	return l.CreateToken(in)
}

// group: token
func (s *CoreServer) DeleteToken(ctx context.Context, in *core.UUIDsReq) (*core.BaseResp, error) {
	l := logic.NewDeleteTokenLogic(ctx, s.svcCtx)
	return l.DeleteToken(in)
}

// group: token
func (s *CoreServer) GetTokenList(ctx context.Context, in *core.TokenListReq) (*core.TokenListResp, error) {
	l := logic.NewGetTokenListLogic(ctx, s.svcCtx)
	return l.GetTokenList(in)
}

// group: token
func (s *CoreServer) GetTokenById(ctx context.Context, in *core.UUIDReq) (*core.TokenInfo, error) {
	l := logic.NewGetTokenByIdLogic(ctx, s.svcCtx)
	return l.GetTokenById(in)
}

// group: token
func (s *CoreServer) BlockUserAllToken(ctx context.Context, in *core.UUIDReq) (*core.BaseResp, error) {
	l := logic.NewBlockUserAllTokenLogic(ctx, s.svcCtx)
	return l.BlockUserAllToken(in)
}

// group: token
func (s *CoreServer) UpdateToken(ctx context.Context, in *core.TokenInfo) (*core.BaseResp, error) {
	l := logic.NewUpdateTokenLogic(ctx, s.svcCtx)
	return l.UpdateToken(in)
}

// User management
func (s *CoreServer) CreateUser(ctx context.Context, in *core.UserInfo) (*core.BaseUUIDResp, error) {
	l := logic.NewCreateUserLogic(ctx, s.svcCtx)
	return l.CreateUser(in)
}

// group: user
func (s *CoreServer) UpdateUser(ctx context.Context, in *core.UserInfo) (*core.BaseResp, error) {
	l := logic.NewUpdateUserLogic(ctx, s.svcCtx)
	return l.UpdateUser(in)
}

// group: user
func (s *CoreServer) GetUserList(ctx context.Context, in *core.UserListReq) (*core.UserListResp, error) {
	l := logic.NewGetUserListLogic(ctx, s.svcCtx)
	return l.GetUserList(in)
}

// group: user
func (s *CoreServer) GetUserById(ctx context.Context, in *core.UUIDReq) (*core.UserInfo, error) {
	l := logic.NewGetUserByIdLogic(ctx, s.svcCtx)
	return l.GetUserById(in)
}

// group: user
func (s *CoreServer) GetUserByUsername(ctx context.Context, in *core.UsernameReq) (*core.UserInfo, error) {
	l := logic.NewGetUserByUsernameLogic(ctx, s.svcCtx)
	return l.GetUserByUsername(in)
}

// group: user
func (s *CoreServer) DeleteUser(ctx context.Context, in *core.UUIDsReq) (*core.BaseResp, error) {
	l := logic.NewDeleteUserLogic(ctx, s.svcCtx)
	return l.DeleteUser(in)
}

// User authentication (new methods)
func (s *CoreServer) Login(ctx context.Context, in *core.LoginReq) (*core.LoginResp, error) {
	l := logic.NewLoginLogic(ctx, s.svcCtx)
	return l.Login(in)
}

// group: user
func (s *CoreServer) LoginByEmail(ctx context.Context, in *core.LoginByEmailReq) (*core.LoginResp, error) {
	l := logic.NewLoginByEmailLogic(ctx, s.svcCtx)
	return l.LoginByEmail(in)
}

// group: user
func (s *CoreServer) LoginBySms(ctx context.Context, in *core.LoginBySmsReq) (*core.LoginResp, error) {
	l := logic.NewLoginBySmsLogic(ctx, s.svcCtx)
	return l.LoginBySms(in)
}

// group: user
func (s *CoreServer) Register(ctx context.Context, in *core.RegisterReq) (*core.BaseResp, error) {
	l := logic.NewRegisterLogic(ctx, s.svcCtx)
	return l.Register(in)
}

// group: user
func (s *CoreServer) RegisterByEmail(ctx context.Context, in *core.RegisterByEmailReq) (*core.BaseResp, error) {
	l := logic.NewRegisterByEmailLogic(ctx, s.svcCtx)
	return l.RegisterByEmail(in)
}

// group: user
func (s *CoreServer) RegisterBySms(ctx context.Context, in *core.RegisterBySmsReq) (*core.BaseResp, error) {
	l := logic.NewRegisterBySmsLogic(ctx, s.svcCtx)
	return l.RegisterBySms(in)
}

// group: user
func (s *CoreServer) ResetPasswordByEmail(ctx context.Context, in *core.ResetPasswordByEmailReq) (*core.BaseResp, error) {
	l := logic.NewResetPasswordByEmailLogic(ctx, s.svcCtx)
	return l.ResetPasswordByEmail(in)
}

// group: user
func (s *CoreServer) ResetPasswordBySms(ctx context.Context, in *core.ResetPasswordBySmsReq) (*core.BaseResp, error) {
	l := logic.NewResetPasswordBySmsLogic(ctx, s.svcCtx)
	return l.ResetPasswordBySms(in)
}

// group: user
func (s *CoreServer) ChangePassword(ctx context.Context, in *core.ChangePasswordReq) (*core.BaseResp, error) {
	l := logic.NewChangePasswordLogic(ctx, s.svcCtx)
	return l.ChangePassword(in)
}

// group: user
func (s *CoreServer) GetUserInfo(ctx context.Context, in *core.Empty) (*core.UserBaseIDInfoResp, error) {
	l := logic.NewGetUserInfoLogic(ctx, s.svcCtx)
	return l.GetUserInfo(in)
}

// group: user
func (s *CoreServer) GetUserPermCode(ctx context.Context, in *core.Empty) (*core.PermCodeResp, error) {
	l := logic.NewGetUserPermCodeLogic(ctx, s.svcCtx)
	return l.GetUserPermCode(in)
}

// group: user
func (s *CoreServer) GetUserProfile(ctx context.Context, in *core.Empty) (*core.ProfileResp, error) {
	l := logic.NewGetUserProfileLogic(ctx, s.svcCtx)
	return l.GetUserProfile(in)
}

// group: user
func (s *CoreServer) UpdateUserProfile(ctx context.Context, in *core.ProfileInfo) (*core.BaseResp, error) {
	l := logic.NewUpdateUserProfileLogic(ctx, s.svcCtx)
	return l.UpdateUserProfile(in)
}

// group: user
func (s *CoreServer) Logout(ctx context.Context, in *core.Empty) (*core.BaseResp, error) {
	l := logic.NewLogoutLogic(ctx, s.svcCtx)
	return l.Logout(in)
}

// group: user
func (s *CoreServer) RefreshToken(ctx context.Context, in *core.Empty) (*core.RefreshTokenResp, error) {
	l := logic.NewRefreshTokenLogic(ctx, s.svcCtx)
	return l.RefreshToken(in)
}

// group: user
func (s *CoreServer) AccessToken(ctx context.Context, in *core.Empty) (*core.RefreshTokenResp, error) {
	l := logic.NewAccessTokenLogic(ctx, s.svcCtx)
	return l.AccessToken(in)
}
